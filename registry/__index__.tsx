/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
  "index": {
    name: "index",
    description: "",
    type: "registry:style",
    registryDependencies: ["utils"],
    files: [],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  "style": {
    name: "style",
    description: "",
    type: "registry:style",
    registryDependencies: ["utils"],
    files: [],
    component: null,
    categories: undefined,
    meta: undefined,
  },
  "rich-text-editor-plugin": {
    name: "rich-text-editor-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/editor"],
    files: [{
      path: "registry/new-york-v4/editor/editor-ui/content-editable.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/content-editable.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/editor-ui/content-editable.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "toolbar-plugin": {
    name: "toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button-group","dialog","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/context/toolbar-context.tsx",
      type: "registry:component",
      target: "components/editor/context/toolbar-context.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-modal.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "history-toolbar-plugin": {
    name: "history-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/history-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/history-toolbar-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/history-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "block-format-toolbar-plugin": {
    name: "block-format-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/block-format-data.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/block-format-data.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-bulleted-list.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-bulleted-list.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-check-list.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-check-list.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-heading.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-heading.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-numbered-list.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-numbered-list.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-paragraph.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-paragraph.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-quote.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-quote.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/list-max-indent-level-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/list-max-indent-level-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/block-format-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-family-toolbar-plugin": {
    name: "font-family-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-family-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-family-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/font-family-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-size-toolbar-plugin": {
    name: "font-size-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","input","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-size-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-size-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/font-size-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-format-toolbar-plugin": {
    name: "font-format-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["toggle","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-format-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-format-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/font-format-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "subsuper-toolbar-plugin": {
    name: "subsuper-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["toggle-group","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-color-toolbar-plugin": {
    name: "font-color-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","input","popover","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-color-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-color-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-background-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-background-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/colorpicker.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/colorpicker.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/font-color-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "element-format-toolbar-plugin": {
    name: "element-format-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["separator","toggle-group","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/element-format-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/element-format-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/get-selected-node.ts",
      type: "registry:component",
      target: "components/editor/utils/get-selected-node.ts"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/element-format-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "clear-formatting-toolbar-plugin": {
    name: "clear-formatting-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "link-toolbar-plugin": {
    name: "link-toolbar-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["toggle","button","input","@shadcn-editor/toolbar-plugin","@shadcn-editor/link-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/link-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/link-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    },{
      path: "registry/new-york-v4/editor/utils/get-selected-node.ts",
      type: "registry:component",
      target: "components/editor/utils/get-selected-node.ts"
    },{
      path: "registry/new-york-v4/editor/utils/url.ts",
      type: "registry:component",
      target: "components/editor/utils/url.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/link-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "actions-plugin": {
    name: "actions-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/actions-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/actions-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/actions-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "max-length-plugin": {
    name: "max-length-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/max-length-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/max-length-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/max-length-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "counter-character-plugin": {
    name: "counter-character-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/counter-character-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/counter-character-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/counter-character-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "speech-to-text-plugin": {
    name: "speech-to-text-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","tooltip","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/speech-to-text-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/speech-to-text-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-report.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-report.ts"
    },{
      path: "registry/new-york-v4/editor/shared/can-use-dom.ts",
      type: "registry:component",
      target: "components/editor/shared/can-use-dom.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/speech-to-text-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "share-content-plugin": {
    name: "share-content-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","tooltip","sonner","toast","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/share-content-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/share-content-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/doc-serialization.ts",
      type: "registry:component",
      target: "components/editor/utils/doc-serialization.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/share-content-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "import-export-plugin": {
    name: "import-export-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","tooltip","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/import-export-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/import-export-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/import-export-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "markdown-toggle-plugin": {
    name: "markdown-toggle-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/markdown-toggle-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/markdown-toggle-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/markdown-toggle-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "clear-editor-plugin": {
    name: "clear-editor-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","dialog","tooltip","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/clear-editor-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/clear-editor-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/clear-editor-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "edit-mode-toggle-plugin": {
    name: "edit-mode-toggle-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","tooltip","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/edit-mode-toggle-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/edit-mode-toggle-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/edit-mode-toggle-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "tree-view-plugin": {
    name: "tree-view-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","dialog","scroll-area","@shadcn-editor/actions-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/tree-view-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/tree-view-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/tree-view-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "autocomplete-plugin": {
    name: "autocomplete-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/autocomplete-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/autocomplete-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/autocomplete-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/autocomplete-node.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/swipe.ts",
      type: "registry:component",
      target: "components/editor/utils/swipe.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/autocomplete-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "auto-embed-plugin": {
    name: "auto-embed-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","command","dialog","input","popover","select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/embeds/auto-embed-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/embeds/auto-embed-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/embeds/twitter-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/embeds/twitter-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/embeds/tweet-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/embeds/tweet-node.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/embeds/youtube-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/embeds/youtube-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/embeds/youtube-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/embeds/youtube-node.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      type: "registry:component",
      target: "components/editor/editor-hooks/use-modal.tsx"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-tweet-transformer.ts",
      type: "registry:component",
      target: "components/editor/transformers/markdown-tweet-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-embeds.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-embeds.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/embeds/auto-embed-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "component-picker-menu-plugin": {
    name: "component-picker-menu-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["command","dialog","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/component-picker-menu-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/component-picker-menu-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      type: "registry:component",
      target: "components/editor/editor-hooks/use-modal.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/alignment-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/alignment-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/bulleted-list-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/bulleted-list-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/check-list-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/check-list-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/code-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/code-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/columns-layout-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/columns-layout-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/component-picker-option.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/component-picker-option.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/divider-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/divider-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/embeds-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/embeds-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/heading-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/heading-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/image-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/image-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/numbered-list-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/numbered-list-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/paragraph-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/paragraph-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/quote-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/quote-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/table-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/table-picker-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/component-picker-menu-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "code-plugin": {
    name: "code-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/code-action-menu-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/code-action-menu-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/code-highlight-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/code-highlight-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-debounce.ts",
      type: "registry:component",
      target: "components/editor/editor-hooks/use-debounce.ts"
    },{
      path: "registry/new-york-v4/editor/editor-ui/code-button.tsx",
      type: "registry:component",
      target: "components/editor/editor-ui/code-button.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-code-block.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-code-block.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/block-format-data.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/block-format-data.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/code-language-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/code-language-toolbar-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/code-action-menu-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "context-menu-plugin": {
    name: "context-menu-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["command","popover","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/context-menu-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/context-menu-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/context-menu-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "draggable-block-plugin": {
    name: "draggable-block-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/draggable-block-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/draggable-block-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/draggable-block-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "drag-drop-paste-plugin": {
    name: "drag-drop-paste-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin","@shadcn-editor/image-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/drag-drop-paste-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/drag-drop-paste-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/drag-drop-paste-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "emoji-plugin": {
    name: "emoji-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["command","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/emojis-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/emojis-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/emoji-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/emoji-node.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/emoji-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/emoji-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/emoji-list.ts",
      type: "registry:component",
      target: "components/editor/utils/emoji-list.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-emoji-transformer.ts",
      type: "registry:component",
      target: "components/editor/transformers/markdown-emoji-transformer.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/emojis-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "floating-text-format-plugin": {
    name: "floating-text-format-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["separator","toggle-group","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/floating-text-format-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/floating-text-format-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/get-dom-range-rect.ts",
      type: "registry:component",
      target: "components/editor/utils/get-dom-range-rect.ts"
    },{
      path: "registry/new-york-v4/editor/utils/get-selected-node.ts",
      type: "registry:component",
      target: "components/editor/utils/get-selected-node.ts"
    },{
      path: "registry/new-york-v4/editor/utils/set-floating-elem-position.ts",
      type: "registry:component",
      target: "components/editor/utils/set-floating-elem-position.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/floating-text-format-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "horizontal-rule-plugin": {
    name: "horizontal-rule-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-hr-transformer.ts",
      type: "registry:file",
      target: "components/editor/transformers/markdown-hr-transformer.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "image-plugin": {
    name: "image-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","dialog","input","label","select","tabs","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/images-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/images-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/image-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/image-node.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/image-component.tsx",
      type: "registry:component",
      target: "components/editor/editor-ui/image-component.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/image-resizer.tsx",
      type: "registry:component",
      target: "components/editor/editor-ui/image-resizer.tsx"
    },{
      path: "registry/new-york-v4/editor/shared/can-use-dom.ts",
      type: "registry:component",
      target: "components/editor/shared/can-use-dom.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-image-transformer.ts",
      type: "registry:component",
      target: "components/editor/transformers/markdown-image-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-image.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-image.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/images-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "keywords-plugin": {
    name: "keywords-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/keywords-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/keywords-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/keyword-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/keyword-node.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/keywords-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "layout-plugin": {
    name: "layout-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/layout-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/layout-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/layout-container-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/layout-container-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/layout-item-node.tsx",
      type: "registry:component",
      target: "components/editor/nodes/layout-item-node.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-columns-layout.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-columns-layout.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/layout-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "link-plugin": {
    name: "link-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: undefined,
    files: [{
      path: "registry/new-york-v4/editor/plugins/auto-link-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/auto-link-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/floating-link-editor-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/floating-link-editor-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/link-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/link-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/set-floating-elem-position-for-link-editor.ts",
      type: "registry:component",
      target: "components/editor/utils/set-floating-elem-position-for-link-editor.ts"
    },{
      path: "registry/new-york-v4/editor/utils/url.ts",
      type: "registry:component",
      target: "components/editor/utils/url.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/auto-link-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "markdown-plugin": {
    name: "markdown-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","@shadcn-editor/actions-plugin","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/actions/markdown-toggle-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/markdown-toggle-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/actions/markdown-toggle-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "mention-plugin": {
    name: "mention-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["command","@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/mentions-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/mentions-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/mention-node.ts",
      type: "registry:component",
      target: "components/editor/nodes/mention-node.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/mentions-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "table-plugin": {
    name: "table-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["button","command","dialog","input","label","popover","select","@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/table-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/table-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-table.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-table.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      type: "registry:component",
      target: "components/editor/editor-hooks/use-modal.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-debounce.ts",
      type: "registry:component",
      target: "components/editor/editor-hooks/use-debounce.ts"
    },{
      path: "registry/new-york-v4/editor/shared/invariant.ts",
      type: "registry:component",
      target: "components/editor/shared/invariant.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-table-transformer.ts",
      type: "registry:component",
      target: "components/editor/transformers/markdown-table-transformer.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/table-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "tab-focus-plugin": {
    name: "tab-focus-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/tab-focus-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/tab-focus-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/tab-focus-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "typing-pref-plugin": {
    name: "typing-pref-plugin",
    description: "",
    type: "registry:ui",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/editor/plugins/typing-pref-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/typing-pref-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-report.ts",
      type: "registry:component",
      target: "components/editor/editor-hooks/use-report.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/editor/plugins/typing-pref-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "editor": {
    name: "editor",
    description: "",
    type: "registry:block",
    registryDependencies: ["tooltip"],
    files: [{
      path: "registry/new-york-v4/blocks/editor-00/page.tsx",
      type: "registry:page",
      target: "app/editor-00/page.tsx"
    },{
      path: "registry/new-york-v4/blocks/editor-00/editor.tsx",
      type: "registry:block",
      target: "components/blocks/editor-00/editor.tsx"
    },{
      path: "registry/new-york-v4/blocks/editor-00/nodes.ts",
      type: "registry:block",
      target: "components/blocks/editor-00/nodes.ts"
    },{
      path: "registry/new-york-v4/blocks/editor-00/plugins.tsx",
      type: "registry:block",
      target: "components/blocks/editor-00/plugins.tsx"
    },{
      path: "registry/new-york-v4/editor/themes/editor-theme.ts",
      type: "registry:theme",
      target: "components/editor/themes/editor-theme.ts"
    },{
      path: "registry/new-york-v4/editor/themes/editor-theme.css",
      type: "registry:theme",
      target: "components/editor/themes/editor-theme.css"
    },{
      path: "registry/new-york-v4/editor/editor-ui/content-editable.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/content-editable.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/blocks/editor-00/page.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "editor-x": {
    name: "editor-x",
    description: "",
    type: "registry:block",
    registryDependencies: ["button","button-group","checkbox","command","dialog","input","label","popover","scroll-area","select","separator","tabs","textarea","tooltip","toggle","toggle-group"],
    files: [{
      path: "registry/new-york-v4/blocks/editor-x/page.tsx",
      type: "registry:page",
      target: "app/editor-x/page.tsx"
    },{
      path: "registry/new-york-v4/blocks/editor-x/editor.tsx",
      type: "registry:block",
      target: "components/blocks/editor-x/editor.tsx"
    },{
      path: "registry/new-york-v4/blocks/editor-x/nodes.ts",
      type: "registry:block",
      target: "components/blocks/editor-x/nodes.ts"
    },{
      path: "registry/new-york-v4/blocks/editor-x/plugins.tsx",
      type: "registry:block",
      target: "components/blocks/editor-x/plugins.tsx"
    },{
      path: "registry/new-york-v4/editor/themes/editor-theme.ts",
      type: "registry:theme",
      target: "components/editor/themes/editor-theme.ts"
    },{
      path: "registry/new-york-v4/editor/themes/editor-theme.css",
      type: "registry:theme",
      target: "components/editor/themes/editor-theme.css"
    },{
      path: "registry/new-york-v4/editor/context/toolbar-context.tsx",
      type: "registry:component",
      target: "components/editor/context/toolbar-context.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-debounce.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-debounce.ts"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-modal.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-report.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-report.ts"
    },{
      path: "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      type: "registry:hook",
      target: "components/editor/editor-hooks/use-update-toolbar.ts"
    },{
      path: "registry/new-york-v4/editor/nodes/embeds/tweet-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/embeds/tweet-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/embeds/youtube-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/embeds/youtube-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/autocomplete-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/autocomplete-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/emoji-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/emoji-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/image-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/image-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/keyword-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/keyword-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/layout-container-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/layout-container-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/layout-item-node.tsx",
      type: "registry:file",
      target: "components/editor/nodes/layout-item-node.tsx"
    },{
      path: "registry/new-york-v4/editor/nodes/mention-node.ts",
      type: "registry:file",
      target: "components/editor/nodes/mention-node.ts"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/actions-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/actions-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/character-limit-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/character-limit-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/clear-editor-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/clear-editor-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/counter-character-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/counter-character-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/edit-mode-toggle-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/edit-mode-toggle-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/import-export-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/import-export-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/markdown-toggle-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/markdown-toggle-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/max-length-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/max-length-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/share-content-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/share-content-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/speech-to-text-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/speech-to-text-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/actions/tree-view-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/actions/tree-view-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/embeds/auto-embed-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/embeds/auto-embed-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/embeds/twitter-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/embeds/twitter-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/embeds/youtube-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/embeds/youtube-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/alignment-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/alignment-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/bulleted-list-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/bulleted-list-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/check-list-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/check-list-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/code-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/code-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/columns-layout-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/columns-layout-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/component-picker-option.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/component-picker-option.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/divider-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/divider-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/embeds-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/embeds-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/heading-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/heading-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/image-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/image-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/numbered-list-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/numbered-list-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/paragraph-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/paragraph-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/quote-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/quote-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/picker/table-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/picker/table-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/block-format-data.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/block-format-data.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-bulleted-list.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-bulleted-list.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-check-list.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-check-list.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-code-block.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-code-block.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-heading.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-heading.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-numbered-list.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-numbered-list.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-paragraph.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-paragraph.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format/format-quote.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format/format-quote.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-columns-layout.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-columns-layout.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-embeds.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-embeds.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-image.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-image.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-table.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert/insert-table.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-format-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-format-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/block-insert-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/block-insert-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/code-language-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/code-language-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/element-format-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/element-format-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-background-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-background-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-color-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-color-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-family-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-family-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-format-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-format-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/font-size-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/font-size-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/history-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/history-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/link-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/link-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/auto-link-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/auto-link-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/autocomplete-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/autocomplete-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/code-action-menu-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/code-action-menu-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/code-highlight-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/code-highlight-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/component-picker-menu-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/component-picker-menu-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/context-menu-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/context-menu-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/drag-drop-paste-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/drag-drop-paste-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/draggable-block-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/draggable-block-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/emoji-picker-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/emoji-picker-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/emojis-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/emojis-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/floating-link-editor-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/floating-link-editor-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/floating-text-format-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/floating-text-format-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/images-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/images-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/keywords-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/keywords-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/layout-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/layout-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/link-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/link-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/list-max-indent-level-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/list-max-indent-level-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/mentions-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/mentions-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/tab-focus-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/tab-focus-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/table-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/table-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/typing-pref-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/typing-pref-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/shared/can-use-dom.ts",
      type: "registry:file",
      target: "components/editor/shared/can-use-dom.ts"
    },{
      path: "registry/new-york-v4/editor/shared/caret-from-point.ts",
      type: "registry:file",
      target: "components/editor/shared/caret-from-point.ts"
    },{
      path: "registry/new-york-v4/editor/shared/environment.ts",
      type: "registry:file",
      target: "components/editor/shared/environment.ts"
    },{
      path: "registry/new-york-v4/editor/shared/invariant.ts",
      type: "registry:file",
      target: "components/editor/shared/invariant.ts"
    },{
      path: "registry/new-york-v4/editor/shared/normalize-class-names.ts",
      type: "registry:file",
      target: "components/editor/shared/normalize-class-names.ts"
    },{
      path: "registry/new-york-v4/editor/shared/react-patches.ts",
      type: "registry:file",
      target: "components/editor/shared/react-patches.ts"
    },{
      path: "registry/new-york-v4/editor/shared/react-test-utils.ts",
      type: "registry:file",
      target: "components/editor/shared/react-test-utils.ts"
    },{
      path: "registry/new-york-v4/editor/shared/simple-diff-with-cursor.ts",
      type: "registry:file",
      target: "components/editor/shared/simple-diff-with-cursor.ts"
    },{
      path: "registry/new-york-v4/editor/shared/use-layout-effect.ts",
      type: "registry:file",
      target: "components/editor/shared/use-layout-effect.ts"
    },{
      path: "registry/new-york-v4/editor/shared/warn-only-once.ts",
      type: "registry:file",
      target: "components/editor/shared/warn-only-once.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-emoji-transformer.ts",
      type: "registry:file",
      target: "components/editor/transformers/markdown-emoji-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-hr-transformer.ts",
      type: "registry:file",
      target: "components/editor/transformers/markdown-hr-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-image-transformer.ts",
      type: "registry:file",
      target: "components/editor/transformers/markdown-image-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-table-transformer.ts",
      type: "registry:file",
      target: "components/editor/transformers/markdown-table-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/transformers/markdown-tweet-transformer.ts",
      type: "registry:file",
      target: "components/editor/transformers/markdown-tweet-transformer.ts"
    },{
      path: "registry/new-york-v4/editor/editor-ui/code-button.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/code-button.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/colorpicker.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/colorpicker.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/content-editable.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/content-editable.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/image-component.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/image-component.tsx"
    },{
      path: "registry/new-york-v4/editor/editor-ui/image-resizer.tsx",
      type: "registry:ui",
      target: "components/editor/editor-ui/image-resizer.tsx"
    },{
      path: "registry/new-york-v4/editor/utils/doc-serialization.ts",
      type: "registry:file",
      target: "components/editor/utils/doc-serialization.ts"
    },{
      path: "registry/new-york-v4/editor/utils/emoji-list.ts",
      type: "registry:file",
      target: "components/editor/utils/emoji-list.ts"
    },{
      path: "registry/new-york-v4/editor/utils/get-dom-range-rect.ts",
      type: "registry:file",
      target: "components/editor/utils/get-dom-range-rect.ts"
    },{
      path: "registry/new-york-v4/editor/utils/get-selected-node.ts",
      type: "registry:file",
      target: "components/editor/utils/get-selected-node.ts"
    },{
      path: "registry/new-york-v4/editor/utils/guard.ts",
      type: "registry:file",
      target: "components/editor/utils/guard.ts"
    },{
      path: "registry/new-york-v4/editor/utils/is-mobile-width.ts",
      type: "registry:file",
      target: "components/editor/utils/is-mobile-width.ts"
    },{
      path: "registry/new-york-v4/editor/utils/set-floating-elem-position-for-link-editor.ts",
      type: "registry:file",
      target: "components/editor/utils/set-floating-elem-position-for-link-editor.ts"
    },{
      path: "registry/new-york-v4/editor/utils/set-floating-elem-position.ts",
      type: "registry:file",
      target: "components/editor/utils/set-floating-elem-position.ts"
    },{
      path: "registry/new-york-v4/editor/utils/swipe.ts",
      type: "registry:file",
      target: "components/editor/utils/swipe.ts"
    },{
      path: "registry/new-york-v4/editor/utils/url.ts",
      type: "registry:file",
      target: "components/editor/utils/url.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/blocks/editor-x/page.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "editor-md": {
    name: "editor-md",
    description: "",
    type: "registry:block",
    registryDependencies: ["@shadcn-editor/editor","@shadcn-editor/rich-text-editor-plugin","@shadcn-editor/block-format-toolbar-plugin","@shadcn-editor/element-format-toolbar-plugin","@shadcn-editor/font-format-toolbar-plugin","@shadcn-editor/history-toolbar-plugin","@shadcn-editor/link-toolbar-plugin","@shadcn-editor/code-plugin","@shadcn-editor/component-picker-menu-plugin","@shadcn-editor/draggable-block-plugin","@shadcn-editor/floating-text-format-plugin","@shadcn-editor/horizontal-rule-plugin","@shadcn-editor/image-plugin","@shadcn-editor/link-plugin","@shadcn-editor/markdown-plugin","@shadcn-editor/table-plugin"],
    files: [{
      path: "registry/new-york-v4/blocks/editor-md/page.tsx",
      type: "registry:page",
      target: "app/editor-md/page.tsx"
    },{
      path: "registry/new-york-v4/blocks/editor-md/editor.tsx",
      type: "registry:block",
      target: "components/blocks/editor-md/editor.tsx"
    },{
      path: "registry/new-york-v4/blocks/editor-md/nodes.ts",
      type: "registry:block",
      target: "components/blocks/editor-md/nodes.ts"
    },{
      path: "registry/new-york-v4/blocks/editor-md/plugins.tsx",
      type: "registry:block",
      target: "components/blocks/editor-md/plugins.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/horizontal-rule-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/horizontal-rule-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/image-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/image-toolbar-plugin.tsx"
    },{
      path: "registry/new-york-v4/editor/plugins/toolbar/table-toolbar-plugin.tsx",
      type: "registry:component",
      target: "components/editor/plugins/toolbar/table-toolbar-plugin.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/blocks/editor-md/page.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "rich-text-editor-plugin-demo": {
    name: "rich-text-editor-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/rich-text-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/rich-text-editor-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/rich-text-editor-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "actions-plugin-demo": {
    name: "actions-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/actions-plugin","button"],
    files: [{
      path: "registry/new-york-v4/examples/actions-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/actions-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "autocomplete-plugin-demo": {
    name: "autocomplete-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/autocomplete-plugin","button"],
    files: [{
      path: "registry/new-york-v4/examples/autocomplete-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/autocomplete-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "auto-embed-plugin-demo": {
    name: "auto-embed-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/auto-embed-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/auto-embed-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/auto-embed-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "auto-focus-plugin-demo": {
    name: "auto-focus-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/auto-focus-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/auto-focus-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/auto-focus-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "block-format-toolbar-plugin-demo": {
    name: "block-format-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/block-format-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/block-format-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/block-format-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "clear-editor-plugin-demo": {
    name: "clear-editor-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/clear-editor-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/clear-editor-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/clear-editor-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "clear-formatting-toolbar-plugin-demo": {
    name: "clear-formatting-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/clear-formatting-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/clear-formatting-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/clear-formatting-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "code-plugin-demo": {
    name: "code-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/code-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/code-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/code-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "component-picker-menu-plugin-demo": {
    name: "component-picker-menu-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/component-picker-menu-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/component-picker-menu-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/component-picker-menu-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "context-menu-plugin-demo": {
    name: "context-menu-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/context-menu-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/context-menu-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/context-menu-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "counter-character-plugin-demo": {
    name: "counter-character-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/counter-character-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/counter-character-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/counter-character-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "drag-drop-paste-plugin-demo": {
    name: "drag-drop-paste-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/drag-drop-paste-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/drag-drop-paste-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/drag-drop-paste-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "draggable-block-plugin-demo": {
    name: "draggable-block-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/draggable-block-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/draggable-block-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/draggable-block-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "edit-mode-toggle-plugin-demo": {
    name: "edit-mode-toggle-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/edit-mode-toggle-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/edit-mode-toggle-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/edit-mode-toggle-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "element-format-toolbar-plugin-demo": {
    name: "element-format-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/element-format-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/element-format-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/element-format-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "emoji-plugin-demo": {
    name: "emoji-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/emoji-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/emoji-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/emoji-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "floating-text-format-plugin-demo": {
    name: "floating-text-format-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/floating-text-format-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/floating-text-format-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/floating-text-format-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-color-toolbar-plugin-demo": {
    name: "font-color-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/font-color-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/font-color-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/font-color-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-family-toolbar-plugin-demo": {
    name: "font-family-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/font-family-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/font-family-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/font-family-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-format-toolbar-plugin-demo": {
    name: "font-format-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/font-format-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/font-format-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/font-format-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "font-size-toolbar-plugin-demo": {
    name: "font-size-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/font-size-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/font-size-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/font-size-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "hashtag-plugin-demo": {
    name: "hashtag-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/hashtag-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/hashtag-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/hashtag-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "history-toolbar-plugin-demo": {
    name: "history-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/history-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/history-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/history-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "horizontal-rule-plugin-demo": {
    name: "horizontal-rule-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/horizontal-rule-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/horizontal-rule-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/horizontal-rule-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "image-plugin-demo": {
    name: "image-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/image-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/image-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/image-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "import-export-plugin-demo": {
    name: "import-export-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/import-export-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/import-export-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/import-export-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "keywords-plugin-demo": {
    name: "keywords-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/keywords-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/keywords-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/keywords-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "layout-plugin-demo": {
    name: "layout-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/layout-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/layout-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/layout-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "link-plugin-demo": {
    name: "link-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/link-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/link-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/link-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "link-toolbar-plugin-demo": {
    name: "link-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/link-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/link-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/link-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "markdown-plugin-demo": {
    name: "markdown-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/markdown-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/markdown-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/markdown-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "markdown-toggle-plugin-demo": {
    name: "markdown-toggle-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/markdown-toggle-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/markdown-toggle-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/markdown-toggle-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "max-length-plugin-demo": {
    name: "max-length-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/max-length-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/max-length-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/max-length-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "mention-plugin-demo": {
    name: "mention-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/mention-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/mention-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/mention-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "share-content-plugin-demo": {
    name: "share-content-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/share-content-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/share-content-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/share-content-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "speech-to-text-plugin-demo": {
    name: "speech-to-text-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/speech-to-text-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/speech-to-text-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/speech-to-text-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "subsuper-toolbar-plugin-demo": {
    name: "subsuper-toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/subsuper-toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/subsuper-toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/subsuper-toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "tab-focus-plugin-demo": {
    name: "tab-focus-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/tab-focus-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/tab-focus-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/tab-focus-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "table-plugin-demo": {
    name: "table-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/table-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/table-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/table-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "toolbar-plugin-demo": {
    name: "toolbar-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/toolbar-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/toolbar-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/toolbar-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "tree-view-plugin-demo": {
    name: "tree-view-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/tree-view-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/tree-view-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/tree-view-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "typing-pref-plugin-demo": {
    name: "typing-pref-plugin-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["@shadcn-editor/typing-pref-plugin"],
    files: [{
      path: "registry/new-york-v4/examples/typing-pref-plugin-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/typing-pref-plugin-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "test-component-demo": {
    name: "test-component-demo",
    description: "",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "registry/new-york-v4/examples/test-component-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/test-component-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  }