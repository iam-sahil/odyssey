{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons-pin",
  "type": "registry:ui",
  "title": "Pin Icon",
  "description": "Pin icon component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "@animate-ui/icons-icon"
  ],
  "files": [
    {
      "path": "registry/icons/pin/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, Variants } from 'motion/react';\n\nimport {\n  getVariants,\n  useAnimateIconContext,\n  IconWrapper,\n  type IconProps,\n} from '@/components/animate-ui/icons/icon';\n\ntype PinProps = IconProps<keyof typeof animations>;\n\nconst animations = {\n  default: {\n    group: {\n      initial: {\n        scale: 1,\n        rotate: 0,\n        x: 0,\n        y: 0,\n        transformOrigin: 'bottom center',\n      },\n      animate: {\n        scale: [1, 0.75, 1, 1],\n        rotate: [0, 30, -15, 0],\n        x: [0, 0, 0, 0],\n        y: [0, -6, 0, 0],\n        transformOrigin: 'bottom center',\n        transition: { ease: 'easeInOut', duration: 1 },\n      },\n    },\n    line: {},\n    path: {},\n  } satisfies Record<string, Variants>,\n  wiggle: {\n    group: {\n      initial: {\n        rotate: 0,\n        transformOrigin: 'bottom center',\n      },\n      animate: {\n        rotate: [0, 15, -10, 0],\n        transformOrigin: 'bottom center',\n        transition: { ease: 'easeInOut', duration: 1 },\n      },\n    },\n    line: {},\n    path: {},\n  } satisfies Record<string, Variants>,\n  rotate: {\n    group: {\n      initial: {\n        transform: 'rotate3d(0, 1, 0, 0deg)',\n        perspective: 600,\n      },\n      animate: {\n        transform: 'rotate3d(0, 1, 0, 360deg)',\n        perspective: 600,\n        transition: { ease: 'easeInOut', duration: 0.7 },\n      },\n    },\n    line: {},\n    path: {},\n  } satisfies Record<string, Variants>,\n} as const;\n\nfunction IconComponent({ size, ...props }: PinProps) {\n  const { controls } = useAnimateIconContext();\n  const variants = getVariants(animations);\n\n  return (\n    <motion.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <motion.g variants={variants.group} initial=\"initial\" animate={controls}>\n        <motion.line\n          x1={12}\n          y1={17.1}\n          x2={12}\n          y2={22}\n          variants={variants.line}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M9,10.8c0,.8-.4,1.5-1.1,1.8l-1.8.9c-.7.3-1.1,1-1.1,1.8v.8c0,.6.4,1,1,1h12c.6,0,1-.4,1-1v-.8c0-.8-.4-1.5-1.1-1.8l-1.8-.9c-.7-.3-1.1-1-1.1-1.8v-3.8c0-.6.4-1,1-1,1.1,0,2-.9,2-2s-.9-2-2-2h-8c-1.1,0-2,.9-2,2s.9,2,2,2,1,.4,1,1v3.8Z\"\n          variants={variants.path}\n          initial=\"initial\"\n          animate={controls}\n        />\n      </motion.g>\n    </motion.svg>\n  );\n}\n\nfunction Pin(props: PinProps) {\n  return <IconWrapper icon={IconComponent} {...props} />;\n}\n\nexport {\n  animations,\n  Pin,\n  Pin as PinIcon,\n  type PinProps,\n  type PinProps as PinIconProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/icons/pin.tsx"
    }
  ],
  "meta": {
    "keywords": [
      "pin",
      "map",
      "location",
      "lock",
      "fixed",
      "anchor"
    ]
  }
}