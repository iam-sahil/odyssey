{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons-gallery-horizontal-end",
  "type": "registry:ui",
  "title": "Gallery Horizontal End Icon",
  "description": "Gallery horizontal end icon component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "@animate-ui/icons-icon"
  ],
  "files": [
    {
      "path": "registry/icons/gallery-horizontal-end/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, type Variants } from 'motion/react';\n\nimport {\n  getVariants,\n  useAnimateIconContext,\n  IconWrapper,\n  type IconProps,\n} from '@/components/animate-ui/icons/icon';\n\ntype GalleryVerticalEndProps = IconProps<keyof typeof animations>;\n\nconst animations = {\n  default: (() => {\n    const animation: Record<string, Variants> = {\n      rect: {},\n    };\n\n    for (let i = 1; i <= 2; i++) {\n      animation[`path${i}`] = {\n        initial: { opacity: 1, scale: 1, y: 0 },\n        animate: {\n          opacity: [0, 1],\n          scale: [0.8, 1],\n          y: [2 * i, 0],\n          transition: {\n            delay: 0.2 * (2 - i),\n            type: 'spring',\n            stiffness: 150,\n            damping: 15,\n          },\n        },\n      };\n    }\n\n    return animation;\n  })() satisfies Record<string, Variants>,\n\n  zoom: (() => {\n    const animation: Record<string, Variants> = {\n      rect: {\n        initial: { opacity: 1, scale: 1 },\n        animate: {\n          opacity: 0,\n          scale: 0,\n          transition: {\n            opacity: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.2,\n            },\n            scale: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.2,\n            },\n          },\n        },\n      },\n    };\n\n    for (let i = 1; i <= 2; i++) {\n      animation[`path${i}`] = {\n        initial: { opacity: 1, transform: 'translateY(0) scale(1)' },\n        animate: {\n          opacity: 0,\n          transform: `translateY(${(3 - i) * 3}px) scale(0)`,\n          transition: {\n            transform: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.8 - 0.2 * i,\n            },\n            opacity: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.8 - 0.2 * i,\n            },\n            scale: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.8 - 0.2 * i,\n            },\n          },\n        },\n      };\n    }\n\n    return animation;\n  })() satisfies Record<string, Variants>,\n\n  collapse: {\n    rect: {\n      initial: { y: 0 },\n      animate: {\n        y: -4,\n        transition: {\n          duration: 0.3,\n          ease: 'easeInOut',\n        },\n      },\n    },\n    path1: {\n      initial: { y: 0 },\n      animate: {\n        y: 4,\n        transition: {\n          duration: 0.3,\n          ease: 'easeInOut',\n        },\n      },\n    },\n  } satisfies Record<string, Variants>,\n} as const;\n\nfunction IconComponent({ size, ...props }: GalleryVerticalEndProps) {\n  const { controls } = useAnimateIconContext();\n  const variants = getVariants(animations);\n\n  return (\n    <motion.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <motion.path\n        d=\"M7 2h10\"\n        variants={variants.path1}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M5 6h14\"\n        variants={variants.path2}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.rect\n        width=\"18\"\n        height=\"12\"\n        x=\"3\"\n        y=\"10\"\n        rx=\"2\"\n        variants={variants.rect}\n        initial=\"initial\"\n        animate={controls}\n      />\n    </motion.svg>\n  );\n}\n\nfunction GalleryVerticalEnd(props: GalleryVerticalEndProps) {\n  return <IconWrapper icon={IconComponent} {...props} />;\n}\n\nexport {\n  animations,\n  GalleryVerticalEnd,\n  GalleryVerticalEnd as GalleryVerticalEndIcon,\n  type GalleryVerticalEndProps,\n  type GalleryVerticalEndProps as GalleryVerticalEndIconProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/icons/gallery-horizontal-end.tsx"
    }
  ],
  "meta": {
    "keywords": [
      "layout",
      "design",
      "development",
      "photography",
      "multimedia",
      "files"
    ]
  }
}