{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons-router",
  "type": "registry:ui",
  "title": "Router Icon",
  "description": "Router icon component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "@animate-ui/icons-icon"
  ],
  "files": [
    {
      "path": "registry/icons/router/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, type Variants } from 'motion/react';\n\nimport {\n  getVariants,\n  useAnimateIconContext,\n  IconWrapper,\n  type IconProps,\n} from '@/components/animate-ui/icons/icon';\n\ntype RouterProps = IconProps<keyof typeof animations>;\n\nconst animations = {\n  default: (() => {\n    const animation: Record<string, Variants> = {\n      rect: {},\n      path3: {\n        initial: { opacity: 1 },\n        animate: {\n          opacity: [1, 0, 1, 0, 1],\n          transition: {\n            duration: 0.8,\n            ease: 'easeInOut',\n          },\n        },\n      },\n      path4: {\n        initial: { opacity: 1 },\n        animate: {\n          opacity: [0, 1, 0, 1],\n          transition: {\n            duration: 0.8,\n            ease: 'easeInOut',\n          },\n        },\n      },\n      path5: {},\n    };\n\n    for (let i = 1; i <= 2; i++) {\n      animation[`path${i}`] = {\n        initial: { opacity: 1, scale: 1 },\n        animate: {\n          opacity: 0,\n          scale: 0,\n          transition: {\n            opacity: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.2,\n              delay: 0.2 * (i - 1),\n            },\n            scale: {\n              duration: 0.2,\n              ease: 'easeInOut',\n              repeat: 1,\n              repeatType: 'reverse',\n              repeatDelay: 0.2,\n              delay: 0.2 * (i - 1),\n            },\n          },\n        },\n      };\n    }\n\n    return animation;\n  })() satisfies Record<string, Variants>,\n} as const;\n\nfunction IconComponent({ size, ...props }: RouterProps) {\n  const { controls } = useAnimateIconContext();\n  const variants = getVariants(animations);\n\n  return (\n    <motion.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <motion.rect\n        width=\"20\"\n        height=\"8\"\n        x=\"2\"\n        y=\"14\"\n        rx=\"2\"\n        variants={variants.rect}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M17.84 7.17a4 4 0 0 0-5.66 0\"\n        variants={variants.path1}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M20.66 4.34a8 8 0 0 0-11.31 0\"\n        variants={variants.path2}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M6.01 18H6\"\n        variants={variants.path3}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M10.01 18H10\"\n        variants={variants.path4}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M15 10v4\"\n        variants={variants.path5}\n        initial=\"initial\"\n        animate={controls}\n      />\n    </motion.svg>\n  );\n}\n\nfunction Router(props: RouterProps) {\n  return <IconWrapper icon={IconComponent} {...props} />;\n}\n\nexport {\n  animations,\n  Router,\n  Router as RouterIcon,\n  type RouterProps,\n  type RouterProps as RouterIconProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/icons/router.tsx"
    }
  ],
  "meta": {
    "keywords": [
      "computer",
      "server",
      "cloud"
    ]
  }
}