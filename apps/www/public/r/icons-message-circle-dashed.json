{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons-message-circle-dashed",
  "type": "registry:ui",
  "title": "Message Circle Dashed Icon",
  "description": "Message circle dashed icon component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "@animate-ui/icons-icon"
  ],
  "files": [
    {
      "path": "registry/icons/message-circle-dashed/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, type Variants } from 'motion/react';\n\nimport {\n  getVariants,\n  useAnimateIconContext,\n  IconWrapper,\n  type IconProps,\n} from '@/components/animate-ui/icons/icon';\n\ntype MessageCircleDashedProps = IconProps<keyof typeof animations>;\n\nconst animations = {\n  default: {\n    group: {\n      initial: {\n        rotate: 0,\n      },\n      animate: {\n        transformOrigin: 'bottom left',\n        rotate: [0, 8, -8, 2, 0],\n        transition: {\n          ease: 'easeInOut',\n          duration: 0.8,\n          times: [0, 0.4, 0.6, 0.8, 1],\n        },\n      },\n    },\n    path1: {},\n    path2: {},\n    path3: {},\n    path4: {},\n    path5: {},\n    path6: {},\n    path7: {},\n    path8: {},\n  } satisfies Record<string, Variants>,\n  draw: {\n    group: {},\n    ...(() => {\n      const paths: Record<string, Variants> = {};\n\n      for (let i = 1; i <= 8; i++) {\n        paths[`path${i}`] = {\n          initial: { opacity: 0, scale: 0 },\n          animate: {\n            opacity: [0, 1],\n            scale: [0, 1],\n            transition: {\n              delay: i * 0.2,\n              duration: 0.4,\n            },\n          },\n        };\n      }\n\n      return paths;\n    })(),\n  },\n} as const;\n\nfunction IconComponent({ size, ...props }: MessageCircleDashedProps) {\n  const { controls } = useAnimateIconContext();\n  const variants = getVariants(animations);\n\n  return (\n    <motion.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <motion.g variants={variants.group} initial=\"initial\" animate={controls}>\n        <motion.path\n          d=\"M13.5 3.1c-.5 0-1-.1-1.5-.1s-1 .1-1.5.1\"\n          variants={variants.path1}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M19.3 6.8a10.45 10.45 0 0 0-2.1-2.1\"\n          variants={variants.path2}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M20.9 13.5c.1-.5.1-1 .1-1.5s-.1-1-.1-1.5\"\n          variants={variants.path3}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M17.2 19.3a10.45 10.45 0 0 0 2.1-2.1\"\n          variants={variants.path4}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M10.5 20.9c.5.1 1 .1 1.5.1s1-.1 1.5-.1\"\n          variants={variants.path5}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M3.5 17.5 2 22l4.5-1.5\"\n          variants={variants.path6}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M3.1 10.5c0 .5-.1 1-.1 1.5s.1 1 .1 1.5\"\n          variants={variants.path7}\n          initial=\"initial\"\n          animate={controls}\n        />\n        <motion.path\n          d=\"M6.8 4.7a10.45 10.45 0 0 0-2.1 2.1\"\n          variants={variants.path8}\n          initial=\"initial\"\n          animate={controls}\n        />\n      </motion.g>\n    </motion.svg>\n  );\n}\n\nfunction MessageCircleDashed(props: MessageCircleDashedProps) {\n  return <IconWrapper icon={IconComponent} {...props} />;\n}\n\nexport {\n  animations,\n  MessageCircleDashed,\n  MessageCircleDashed as MessageCircleDashedIcon,\n  type MessageCircleDashedProps,\n  type MessageCircleDashedProps as MessageCircleDashedIconProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/icons/message-circle-dashed.tsx"
    }
  ],
  "meta": {
    "keywords": [
      "comment",
      "chat",
      "conversation",
      "dialog",
      "feedback",
      "speech bubble",
      "draft"
    ]
  }
}