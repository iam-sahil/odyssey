{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icons-chart-no-axes-column-decreasing",
  "type": "registry:ui",
  "title": "Chart No Axes Column Decreasing Icon",
  "description": "Chart no axes column decreasing icon component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "@animate-ui/icons-icon"
  ],
  "files": [
    {
      "path": "registry/icons/chart-no-axes-column-decreasing/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, type Variants } from 'motion/react';\n\nimport {\n  getVariants,\n  useAnimateIconContext,\n  IconWrapper,\n  type IconProps,\n} from '@/components/animate-ui/icons/icon';\n\ntype ChartNoAxesColumnDecreasingProps = IconProps<keyof typeof animations>;\n\nconst animations = {\n  default: (() => {\n    const animation: Record<string, Variants> = {};\n\n    for (let i = 1; i <= 3; i++) {\n      animation[`path${i}`] = {\n        initial: { opacity: 1 },\n        animate: {\n          opacity: [0, 1],\n          pathLength: [0, 1],\n          transition: {\n            ease: 'easeInOut',\n            duration: 0.4,\n            delay: (i - 1) * 0.3,\n          },\n        },\n      };\n    }\n\n    return animation as Record<string, Variants>;\n  })() satisfies Record<string, Variants>,\n  'default-loop': (() => {\n    const n = 3;\n    const delayStep = 0.3;\n    const segDuration = 0.4;\n\n    const startOut = (i: number) => (n - i) * delayStep;\n    const endOut = (i: number) => startOut(i) + segDuration;\n\n    const outTotal = Math.max(\n      ...Array.from({ length: n }, (_, k) => endOut(k + 1)),\n    );\n\n    const startIn = (i: number) => outTotal + (i - 1) * delayStep;\n    const endIn = (i: number) => startIn(i) + segDuration;\n\n    const totalDuration = Math.max(\n      ...Array.from({ length: n }, (_, k) => endIn(k + 1)),\n    );\n\n    const animation: Record<string, Variants> = {};\n\n    for (let i = 1; i <= n; i++) {\n      const tSO = startOut(i) / totalDuration;\n      const tEO = endOut(i) / totalDuration;\n      const tSI = startIn(i) / totalDuration;\n      const tEI = endIn(i) / totalDuration;\n\n      animation[`path${i}`] = {\n        initial: { opacity: 1, pathLength: 1 },\n        animate: {\n          pathLength: [1, 1, 0, 0, 1],\n          opacity: [1, 1, 0, 0, 1],\n          transition: {\n            ease: 'easeInOut',\n            duration: totalDuration,\n            times: [0, tSO, tEO, tSI, tEI],\n          },\n        },\n      };\n    }\n\n    return animation as Record<string, Variants>;\n  })() satisfies Record<string, Variants>,\n  increasing: {\n    path1: {\n      initial: { d: 'M5 21V3' },\n      animate: {\n        d: 'M5 21V15',\n        transition: { duration: 0.4, ease: 'easeInOut' },\n      },\n    },\n    path2: {},\n    path3: {\n      initial: { d: 'M19 21V15' },\n      animate: {\n        d: 'M19 21V3',\n        transition: { duration: 0.4, ease: 'easeInOut' },\n      },\n    },\n  } satisfies Record<string, Variants>,\n} as const;\n\nfunction IconComponent({ size, ...props }: ChartNoAxesColumnDecreasingProps) {\n  const { controls } = useAnimateIconContext();\n  const variants = getVariants(animations);\n\n  return (\n    <motion.svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <motion.path\n        d=\"M5 21V3\"\n        variants={variants.path1}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M12 21V9\"\n        variants={variants.path2}\n        initial=\"initial\"\n        animate={controls}\n      />\n      <motion.path\n        d=\"M19 21V15\"\n        variants={variants.path3}\n        initial=\"initial\"\n        animate={controls}\n      />\n    </motion.svg>\n  );\n}\n\nfunction ChartNoAxesColumnDecreasing(props: ChartNoAxesColumnDecreasingProps) {\n  return <IconWrapper icon={IconComponent} {...props} />;\n}\n\nexport {\n  animations,\n  ChartNoAxesColumnDecreasing,\n  ChartNoAxesColumnDecreasing as ChartNoAxesColumnDecreasingIcon,\n  type ChartNoAxesColumnDecreasingProps,\n  type ChartNoAxesColumnDecreasingProps as ChartNoAxesColumnDecreasingIconProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/icons/chart-no-axes-column-decreasing.tsx"
    }
  ],
  "meta": {
    "keywords": [
      "statistics",
      "analytics",
      "diagram",
      "graph",
      "trending down"
    ]
  }
}