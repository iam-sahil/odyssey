{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "element-format-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/link",
    "@lexical/utils",
    "@lexical/selection"
  ],
  "registryDependencies": [
    "separator",
    "toggle-group",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/element-format-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { $isLinkNode } from \"@lexical/link\"\nimport { $findMatchingParent } from \"@lexical/utils\"\nimport {\n  $isElementNode,\n  $isRangeSelection,\n  BaseSelection,\n  ElementFormatType,\n  FORMAT_ELEMENT_COMMAND,\n  INDENT_CONTENT_COMMAND,\n  OUTDENT_CONTENT_COMMAND,\n} from \"lexical\"\nimport {\n  AlignCenterIcon,\n  AlignJustifyIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n  IndentDecreaseIcon,\n  IndentIncreaseIcon,\n} from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport { getSelectedNode } from \"@/registry/new-york-v4/editor/utils/get-selected-node\"\nimport { Separator } from \"@/registry/new-york-v4/ui/separator\"\nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@/registry/new-york-v4/ui/toggle-group\"\n\nconst ELEMENT_FORMAT_OPTIONS: {\n  [key in Exclude<ElementFormatType, \"start\" | \"end\" | \"\">]: {\n    icon: React.ReactNode\n    iconRTL: string\n    name: string\n  }\n} = {\n  left: {\n    icon: <AlignLeftIcon className=\"size-4\" />,\n    iconRTL: \"left-align\",\n    name: \"Left Align\",\n  },\n  center: {\n    icon: <AlignCenterIcon className=\"size-4\" />,\n    iconRTL: \"center-align\",\n    name: \"Center Align\",\n  },\n  right: {\n    icon: <AlignRightIcon className=\"size-4\" />,\n    iconRTL: \"right-align\",\n    name: \"Right Align\",\n  },\n  justify: {\n    icon: <AlignJustifyIcon className=\"size-4\" />,\n    iconRTL: \"justify-align\",\n    name: \"Justify Align\",\n  },\n} as const\n\nexport function ElementFormatToolbarPlugin({\n  separator = true,\n}: {\n  separator?: boolean\n}) {\n  const { activeEditor } = useToolbarContext()\n  const [elementFormat, setElementFormat] = useState<ElementFormatType>(\"left\")\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      const node = getSelectedNode(selection)\n      const parent = node.getParent()\n\n      let matchingParent\n      if ($isLinkNode(parent)) {\n        // If node is a link, we need to fetch the parent paragraph node to set format\n        matchingParent = $findMatchingParent(\n          node,\n          (parentNode) => $isElementNode(parentNode) && !parentNode.isInline()\n        )\n      }\n      setElementFormat(\n        $isElementNode(matchingParent)\n          ? matchingParent.getFormatType()\n          : $isElementNode(node)\n            ? node.getFormatType()\n            : parent?.getFormatType() || \"left\"\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const handleValueChange = (value: string) => {\n    if (!value) return // Prevent unselecting current value\n\n    setElementFormat(value as ElementFormatType)\n\n    if (value === \"indent\") {\n      activeEditor.dispatchCommand(INDENT_CONTENT_COMMAND, undefined)\n    } else if (value === \"outdent\") {\n      activeEditor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined)\n    } else {\n      activeEditor.dispatchCommand(\n        FORMAT_ELEMENT_COMMAND,\n        value as ElementFormatType\n      )\n    }\n  }\n\n  return (\n    <>\n      <ToggleGroup\n        type=\"single\"\n        value={elementFormat}\n        defaultValue={elementFormat}\n        onValueChange={handleValueChange}\n      >\n        {/* Alignment toggles */}\n        {Object.entries(ELEMENT_FORMAT_OPTIONS).map(([value, option]) => (\n          <ToggleGroupItem\n            key={value}\n            value={value}\n            variant={\"outline\"}\n            size=\"sm\"\n            aria-label={option.name}\n          >\n            {option.icon}\n          </ToggleGroupItem>\n        ))}\n      </ToggleGroup>\n      {separator && <Separator orientation=\"vertical\" className=\"!h-7\" />}\n      {/* Indentation toggles */}\n      <ToggleGroup\n        type=\"single\"\n        value={elementFormat}\n        defaultValue={elementFormat}\n        onValueChange={handleValueChange}\n      >\n        <ToggleGroupItem\n          value=\"outdent\"\n          aria-label=\"Outdent\"\n          variant={\"outline\"}\n          size=\"sm\"\n        >\n          <IndentDecreaseIcon className=\"size-4\" />\n        </ToggleGroupItem>\n\n        <ToggleGroupItem\n          value=\"indent\"\n          variant={\"outline\"}\n          aria-label=\"Indent\"\n          size=\"sm\"\n        >\n          <IndentIncreaseIcon className=\"size-4\" />\n        </ToggleGroupItem>\n      </ToggleGroup>\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/element-format-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/utils/get-selected-node.ts",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { $isAtNodeEnd } from \"@lexical/selection\"\nimport { ElementNode, RangeSelection, TextNode } from \"lexical\"\n\nexport function getSelectedNode(\n  selection: RangeSelection\n): TextNode | ElementNode {\n  const anchor = selection.anchor\n  const focus = selection.focus\n  const anchorNode = selection.anchor.getNode()\n  const focusNode = selection.focus.getNode()\n  if (anchorNode === focusNode) {\n    return anchorNode\n  }\n  const isBackward = selection.isBackward()\n  if (isBackward) {\n    return $isAtNodeEnd(focus) ? anchorNode : focusNode\n  } else {\n    return $isAtNodeEnd(anchor) ? anchorNode : focusNode\n  }\n}\n",
      "type": "registry:component",
      "target": "components/editor/utils/get-selected-node.ts"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}