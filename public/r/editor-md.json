{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editor-md",
  "type": "registry:block",
  "registryDependencies": [
    "@shadcn-editor/editor",
    "@shadcn-editor/rich-text-editor-plugin",
    "@shadcn-editor/block-format-toolbar-plugin",
    "@shadcn-editor/element-format-toolbar-plugin",
    "@shadcn-editor/font-format-toolbar-plugin",
    "@shadcn-editor/history-toolbar-plugin",
    "@shadcn-editor/link-toolbar-plugin",
    "@shadcn-editor/code-plugin",
    "@shadcn-editor/component-picker-menu-plugin",
    "@shadcn-editor/draggable-block-plugin",
    "@shadcn-editor/floating-text-format-plugin",
    "@shadcn-editor/horizontal-rule-plugin",
    "@shadcn-editor/image-plugin",
    "@shadcn-editor/link-plugin",
    "@shadcn-editor/markdown-plugin",
    "@shadcn-editor/table-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/blocks/editor-md/page.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { SerializedEditorState } from \"lexical\"\n\nimport { Editor } from \"@/registry/new-york-v4/blocks/editor-md/editor\"\n\nexport const initialValue = {\n  root: {\n    children: [\n      {\n        children: [\n          {\n            detail: 0,\n            format: 0,\n            mode: \"normal\",\n            style: \"\",\n            text: \"Hello World ðŸš€\",\n            type: \"text\",\n            version: 1,\n          },\n        ],\n        direction: \"ltr\",\n        format: \"\",\n        indent: 0,\n        type: \"paragraph\",\n        version: 1,\n      },\n    ],\n    direction: \"ltr\",\n    format: \"\",\n    indent: 0,\n    type: \"root\",\n    version: 1,\n  },\n} as unknown as SerializedEditorState\n\nexport default function EditorPage() {\n  const [editorState, setEditorState] =\n    useState<SerializedEditorState>(initialValue)\n  return (\n    <Editor\n      editorSerializedState={editorState}\n      onSerializedChange={(value) => setEditorState(value)}\n    />\n  )\n}\n",
      "type": "registry:page",
      "target": "app/editor-md/page.tsx"
    },
    {
      "path": "registry/new-york-v4/blocks/editor-md/editor.tsx",
      "content": "\"use client\"\n\nimport {\n  InitialConfigType,\n  LexicalComposer,\n} from \"@lexical/react/LexicalComposer\"\nimport { OnChangePlugin } from \"@lexical/react/LexicalOnChangePlugin\"\nimport { EditorState, SerializedEditorState } from \"lexical\"\n\nimport { editorTheme } from \"@/registry/new-york-v4/editor/themes/editor-theme\"\nimport { TooltipProvider } from \"@/registry/new-york-v4/ui/tooltip\"\n\nimport { nodes } from \"./nodes\"\nimport { Plugins } from \"./plugins\"\n\nconst editorConfig: InitialConfigType = {\n  namespace: \"Editor\",\n  theme: editorTheme,\n  nodes,\n  onError: (error: Error) => {\n    console.error(error)\n  },\n}\n\nexport function Editor({\n  editorState,\n  editorSerializedState,\n  onChange,\n  onSerializedChange,\n}: {\n  editorState?: EditorState\n  editorSerializedState?: SerializedEditorState\n  onChange?: (editorState: EditorState) => void\n  onSerializedChange?: (editorSerializedState: SerializedEditorState) => void\n}) {\n  return (\n    <div className=\"bg-background overflow-hidden rounded-lg border shadow\">\n      <LexicalComposer\n        initialConfig={{\n          ...editorConfig,\n          ...(editorState ? { editorState } : {}),\n          ...(editorSerializedState\n            ? { editorState: JSON.stringify(editorSerializedState) }\n            : {}),\n        }}\n      >\n        <TooltipProvider>\n          <Plugins />\n\n          <OnChangePlugin\n            ignoreSelectionChange={true}\n            onChange={(editorState) => {\n              onChange?.(editorState)\n              onSerializedChange?.(editorState.toJSON())\n            }}\n          />\n        </TooltipProvider>\n      </LexicalComposer>\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "components/blocks/editor-md/editor.tsx"
    },
    {
      "path": "registry/new-york-v4/blocks/editor-md/nodes.ts",
      "content": "import { CodeHighlightNode, CodeNode } from \"@lexical/code\"\nimport { AutoLinkNode, LinkNode } from \"@lexical/link\"\nimport { ListItemNode, ListNode } from \"@lexical/list\"\nimport { OverflowNode } from \"@lexical/overflow\"\nimport { HorizontalRuleNode } from \"@lexical/react/LexicalHorizontalRuleNode\"\nimport { HeadingNode, QuoteNode } from \"@lexical/rich-text\"\nimport { TableCellNode, TableNode, TableRowNode } from \"@lexical/table\"\nimport {\n  Klass,\n  LexicalNode,\n  LexicalNodeReplacement,\n  ParagraphNode,\n  TextNode,\n} from \"lexical\"\n\nimport { ImageNode } from \"@/registry/new-york-v4/editor/nodes/image-node\"\n\nexport const nodes: ReadonlyArray<Klass<LexicalNode> | LexicalNodeReplacement> =\n  [\n    HeadingNode,\n    ParagraphNode,\n    TextNode,\n    QuoteNode,\n    ListNode,\n    ListItemNode,\n    LinkNode,\n    AutoLinkNode,\n    CodeNode,\n    OverflowNode,\n    CodeHighlightNode,\n    HorizontalRuleNode,\n    ImageNode,\n    TableNode,\n    TableRowNode,\n    TableCellNode,\n  ]\n",
      "type": "registry:block",
      "target": "components/blocks/editor-md/nodes.ts"
    },
    {
      "path": "registry/new-york-v4/blocks/editor-md/plugins.tsx",
      "content": "import { useState } from \"react\"\nimport {\n  CHECK_LIST,\n  ELEMENT_TRANSFORMERS,\n  MULTILINE_ELEMENT_TRANSFORMERS,\n  TEXT_FORMAT_TRANSFORMERS,\n  TEXT_MATCH_TRANSFORMERS,\n} from \"@lexical/markdown\"\nimport { CheckListPlugin } from \"@lexical/react/LexicalCheckListPlugin\"\nimport { ClickableLinkPlugin } from \"@lexical/react/LexicalClickableLinkPlugin\"\nimport { LexicalErrorBoundary } from \"@lexical/react/LexicalErrorBoundary\"\nimport { HistoryPlugin } from \"@lexical/react/LexicalHistoryPlugin\"\nimport { HorizontalRulePlugin } from \"@lexical/react/LexicalHorizontalRulePlugin\"\nimport { ListPlugin } from \"@lexical/react/LexicalListPlugin\"\nimport { MarkdownShortcutPlugin } from \"@lexical/react/LexicalMarkdownShortcutPlugin\"\nimport { RichTextPlugin } from \"@lexical/react/LexicalRichTextPlugin\"\nimport { TabIndentationPlugin } from \"@lexical/react/LexicalTabIndentationPlugin\"\nimport { TablePlugin } from \"@lexical/react/LexicalTablePlugin\"\n\nimport { ContentEditable } from \"@/registry/new-york-v4/editor/editor-ui/content-editable\"\nimport { AutoLinkPlugin } from \"@/registry/new-york-v4/editor/plugins/auto-link-plugin\"\nimport { CodeActionMenuPlugin } from \"@/registry/new-york-v4/editor/plugins/code-action-menu-plugin\"\nimport { CodeHighlightPlugin } from \"@/registry/new-york-v4/editor/plugins/code-highlight-plugin\"\nimport { ComponentPickerMenuPlugin } from \"@/registry/new-york-v4/editor/plugins/component-picker-menu-plugin\"\nimport { DraggableBlockPlugin } from \"@/registry/new-york-v4/editor/plugins/draggable-block-plugin\"\nimport { FloatingLinkEditorPlugin } from \"@/registry/new-york-v4/editor/plugins/floating-link-editor-plugin\"\nimport { FloatingTextFormatToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/floating-text-format-plugin\"\nimport { ImagesPlugin } from \"@/registry/new-york-v4/editor/plugins/images-plugin\"\nimport { LinkPlugin } from \"@/registry/new-york-v4/editor/plugins/link-plugin\"\nimport { ListMaxIndentLevelPlugin } from \"@/registry/new-york-v4/editor/plugins/list-max-indent-level-plugin\"\nimport { AlignmentPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/alignment-picker-plugin\"\nimport { BulletedListPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/bulleted-list-picker-plugin\"\nimport { CheckListPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/check-list-picker-plugin\"\nimport { CodePickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/code-picker-plugin\"\nimport { DividerPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/divider-picker-plugin\"\nimport { HeadingPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/heading-picker-plugin\"\nimport { ImagePickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/image-picker-plugin\"\nimport { NumberedListPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/numbered-list-picker-plugin\"\nimport { ParagraphPickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/paragraph-picker-plugin\"\nimport { QuotePickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/quote-picker-plugin\"\nimport { TablePickerPlugin } from \"@/registry/new-york-v4/editor/plugins/picker/table-picker-plugin\"\nimport { BlockFormatDropDown } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format-toolbar-plugin\"\nimport { FormatBulletedList } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-bulleted-list\"\nimport { FormatCheckList } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-check-list\"\nimport { FormatCodeBlock } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-code-block\"\nimport { FormatHeading } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-heading\"\nimport { FormatNumberedList } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-numbered-list\"\nimport { FormatParagraph } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-paragraph\"\nimport { FormatQuote } from \"@/registry/new-york-v4/editor/plugins/toolbar/block-format/format-quote\"\nimport { CodeLanguageToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/code-language-toolbar-plugin\"\nimport { ElementFormatToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/element-format-toolbar-plugin\"\nimport { FontFormatToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/font-format-toolbar-plugin\"\nimport { HistoryToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/history-toolbar-plugin\"\nimport { HorizontalRuleToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/horizontal-rule-toolbar-plugin\"\nimport { ImageToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/image-toolbar-plugin\"\nimport { LinkToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/link-toolbar-plugin\"\nimport { TableToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/table-toolbar-plugin\"\nimport { ToolbarPlugin } from \"@/registry/new-york-v4/editor/plugins/toolbar/toolbar-plugin\"\nimport { HR } from \"@/registry/new-york-v4/editor/transformers/markdown-hr-transformer\"\nimport { IMAGE } from \"@/registry/new-york-v4/editor/transformers/markdown-image-transformer\"\nimport { TABLE } from \"@/registry/new-york-v4/editor/transformers/markdown-table-transformer\"\n\nconst placeholder = \"Press / for commands...\"\n\nexport function Plugins({}) {\n  const [floatingAnchorElem, setFloatingAnchorElem] =\n    useState<HTMLDivElement | null>(null)\n  const [isLinkEditMode, setIsLinkEditMode] = useState<boolean>(false)\n\n  const onRef = (_floatingAnchorElem: HTMLDivElement) => {\n    if (_floatingAnchorElem !== null) {\n      setFloatingAnchorElem(_floatingAnchorElem)\n    }\n  }\n\n  return (\n    <div className=\"relative\">\n      <ToolbarPlugin>\n        {({ blockType }) => (\n          <div className=\"vertical-align-middle sticky top-0 z-10 flex items-center gap-2 overflow-auto border-b p-1\">\n            <HistoryToolbarPlugin />\n            <BlockFormatDropDown>\n              <FormatParagraph />\n              <FormatHeading levels={[\"h1\", \"h2\", \"h3\"]} />\n              <FormatNumberedList />\n              <FormatBulletedList />\n              <FormatCheckList />\n              <FormatCodeBlock />\n              <FormatQuote />\n            </BlockFormatDropDown>\n            {blockType === \"code\" ? (\n              <CodeLanguageToolbarPlugin />\n            ) : (\n              <>\n                <ElementFormatToolbarPlugin separator={false} />\n                <FontFormatToolbarPlugin />\n                <LinkToolbarPlugin setIsLinkEditMode={setIsLinkEditMode} />\n\n                <HorizontalRuleToolbarPlugin />\n                <ImageToolbarPlugin />\n                <TableToolbarPlugin />\n              </>\n            )}\n          </div>\n        )}\n      </ToolbarPlugin>\n      <div className=\"relative\">\n        <RichTextPlugin\n          contentEditable={\n            <div className=\"\">\n              <div className=\"\" ref={onRef}>\n                <ContentEditable\n                  placeholder={placeholder}\n                  className=\"ContentEditable__root relative block h-[calc(100vh-50px)] min-h-72 overflow-auto px-8 py-4 focus:outline-none\"\n                />\n              </div>\n            </div>\n          }\n          ErrorBoundary={LexicalErrorBoundary}\n        />\n        <HistoryPlugin />\n\n        <ListPlugin />\n        <ListMaxIndentLevelPlugin />\n        <CheckListPlugin />\n\n        <TabIndentationPlugin />\n\n        <ClickableLinkPlugin />\n        <AutoLinkPlugin />\n        <LinkPlugin />\n\n        <FloatingLinkEditorPlugin\n          anchorElem={floatingAnchorElem}\n          isLinkEditMode={isLinkEditMode}\n          setIsLinkEditMode={setIsLinkEditMode}\n        />\n\n        <CodeActionMenuPlugin anchorElem={floatingAnchorElem} />\n        <CodeHighlightPlugin />\n\n        <ComponentPickerMenuPlugin\n          baseOptions={[\n            ParagraphPickerPlugin(),\n            HeadingPickerPlugin({ n: 1 }),\n            HeadingPickerPlugin({ n: 2 }),\n            HeadingPickerPlugin({ n: 3 }),\n            TablePickerPlugin(),\n            CheckListPickerPlugin(),\n            NumberedListPickerPlugin(),\n            BulletedListPickerPlugin(),\n            QuotePickerPlugin(),\n            CodePickerPlugin(),\n            DividerPickerPlugin(),\n            ImagePickerPlugin(),\n            AlignmentPickerPlugin({ alignment: \"left\" }),\n            AlignmentPickerPlugin({ alignment: \"center\" }),\n            AlignmentPickerPlugin({ alignment: \"right\" }),\n            AlignmentPickerPlugin({ alignment: \"justify\" }),\n          ]}\n        />\n\n        <FloatingTextFormatToolbarPlugin\n          anchorElem={floatingAnchorElem}\n          setIsLinkEditMode={setIsLinkEditMode}\n        />\n\n        <HorizontalRulePlugin />\n\n        <ImagesPlugin />\n\n        <TablePlugin />\n\n        <DraggableBlockPlugin anchorElem={floatingAnchorElem} />\n\n        <MarkdownShortcutPlugin\n          transformers={[\n            TABLE,\n            HR,\n            IMAGE,\n            CHECK_LIST,\n            ...ELEMENT_TRANSFORMERS,\n            ...MULTILINE_ELEMENT_TRANSFORMERS,\n            ...TEXT_FORMAT_TRANSFORMERS,\n            ...TEXT_MATCH_TRANSFORMERS,\n          ]}\n        />\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "components/blocks/editor-md/plugins.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/horizontal-rule-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { INSERT_HORIZONTAL_RULE_COMMAND } from \"@lexical/react/LexicalHorizontalRuleNode\"\nimport { ScissorsIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\n\nexport function HorizontalRuleToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  return (\n    <Button\n      onClick={() =>\n        activeEditor.dispatchCommand(INSERT_HORIZONTAL_RULE_COMMAND, undefined)\n      }\n      size={\"icon-sm\"}\n      variant={\"outline\"}\n      className=\"\"\n    >\n      <ScissorsIcon className=\"size-4\" />\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/horizontal-rule-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/image-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { ImageIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { InsertImageDialog } from \"@/registry/new-york-v4/editor/plugins/images-plugin\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\n\nexport function ImageToolbarPlugin() {\n  const { activeEditor, showModal } = useToolbarContext()\n\n  return (\n    <Button\n      onClick={(e) => {\n        showModal(\"Insert Image\", (onClose) => (\n          <InsertImageDialog activeEditor={activeEditor} onClose={onClose} />\n        ))\n      }}\n      variant={\"outline\"}\n      size={\"icon-sm\"}\n      className=\"\"\n    >\n      <ImageIcon className=\"size-4\" />\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/image-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/table-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { TableIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { InsertTableDialog } from \"@/registry/new-york-v4/editor/plugins/table-plugin\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\n\nexport function TableToolbarPlugin() {\n  const { activeEditor, showModal } = useToolbarContext()\n\n  return (\n    <Button\n      onClick={() =>\n        showModal(\"Insert Table\", (onClose) => (\n          <InsertTableDialog activeEditor={activeEditor} onClose={onClose} />\n        ))\n      }\n      size={\"icon-sm\"}\n      variant={\"outline\"}\n      className=\"\"\n    >\n      <TableIcon className=\"size-4\" />\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/table-toolbar-plugin.tsx"
    }
  ]
}