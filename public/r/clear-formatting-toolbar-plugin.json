{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clear-formatting-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/utils",
    "@lexical/table"
  ],
  "registryDependencies": [
    "button",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useCallback } from \"react\"\nimport { $isDecoratorBlockNode } from \"@lexical/react/LexicalDecoratorBlockNode\"\nimport { $isHeadingNode, $isQuoteNode } from \"@lexical/rich-text\"\nimport { $isTableSelection } from \"@lexical/table\"\nimport { $getNearestBlockElementAncestorOrThrow } from \"@lexical/utils\"\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  $isTextNode,\n} from \"lexical\"\nimport { EraserIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\n\nexport function ClearFormattingToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const clearFormatting = useCallback(() => {\n    activeEditor.update(() => {\n      const selection = $getSelection()\n      if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n        const anchor = selection.anchor\n        const focus = selection.focus\n        const nodes = selection.getNodes()\n        const extractedNodes = selection.extract()\n\n        if (anchor.key === focus.key && anchor.offset === focus.offset) {\n          return\n        }\n\n        nodes.forEach((node, idx) => {\n          // We split the first and last node by the selection\n          // So that we don't format unselected text inside those nodes\n          if ($isTextNode(node)) {\n            // Use a separate variable to ensure TS does not lose the refinement\n            let textNode = node\n            if (idx === 0 && anchor.offset !== 0) {\n              textNode = textNode.splitText(anchor.offset)[1] || textNode\n            }\n            if (idx === nodes.length - 1) {\n              textNode = textNode.splitText(focus.offset)[0] || textNode\n            }\n            /**\n             * If the selected text has one format applied\n             * selecting a portion of the text, could\n             * clear the format to the wrong portion of the text.\n             *\n             * The cleared text is based on the length of the selected text.\n             */\n            // We need this in case the selected text only has one format\n            const extractedTextNode = extractedNodes[0]\n            if (nodes.length === 1 && $isTextNode(extractedTextNode)) {\n              textNode = extractedTextNode\n            }\n\n            if (textNode.__style !== \"\") {\n              textNode.setStyle(\"\")\n            }\n            if (textNode.__format !== 0) {\n              textNode.setFormat(0)\n              $getNearestBlockElementAncestorOrThrow(textNode).setFormat(\"\")\n            }\n            node = textNode\n          } else if ($isHeadingNode(node) || $isQuoteNode(node)) {\n            node.replace($createParagraphNode(), true)\n          } else if ($isDecoratorBlockNode(node)) {\n            node.setFormat(\"\")\n          }\n        })\n      }\n    })\n  }, [activeEditor])\n\n  return (\n    <Button\n      className=\"!h-8 !w-8\"\n      aria-label=\"Clear formatting\"\n      variant={\"outline\"}\n      size={\"icon\"}\n      onClick={clearFormatting}\n    >\n      <EraserIcon className=\"h-4 w-4\" />\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx"
    }
  ]
}