{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "history-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "button",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/history-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { IS_APPLE, mergeRegister } from \"@lexical/utils\"\nimport {\n  CAN_REDO_COMMAND,\n  CAN_UNDO_COMMAND,\n  COMMAND_PRIORITY_CRITICAL,\n  REDO_COMMAND,\n  UNDO_COMMAND,\n} from \"lexical\"\nimport { RedoIcon, UndoIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { ButtonGroup } from \"@/registry/new-york-v4/ui/button-group\"\n\nexport function HistoryToolbarPlugin() {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor, $updateToolbar } = useToolbarContext()\n  const [isEditable, setIsEditable] = useState(editor.isEditable())\n  const [canUndo, setCanUndo] = useState(false)\n  const [canRedo, setCanRedo] = useState(false)\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerEditableListener((editable) => {\n        setIsEditable(editable)\n      }),\n      activeEditor.registerUpdateListener(({ editorState }) => {\n        editorState.read(() => {\n          $updateToolbar()\n        })\n      }),\n      activeEditor.registerCommand<boolean>(\n        CAN_UNDO_COMMAND,\n        (payload) => {\n          setCanUndo(payload)\n          return false\n        },\n        COMMAND_PRIORITY_CRITICAL\n      ),\n      activeEditor.registerCommand<boolean>(\n        CAN_REDO_COMMAND,\n        (payload) => {\n          setCanRedo(payload)\n          return false\n        },\n        COMMAND_PRIORITY_CRITICAL\n      )\n    )\n  }, [$updateToolbar, activeEditor, editor])\n\n  return (\n    <ButtonGroup>\n      <Button\n        disabled={!canUndo || !isEditable}\n        onClick={() => {\n          activeEditor.dispatchCommand(UNDO_COMMAND, undefined)\n        }}\n        title={IS_APPLE ? \"Undo (⌘Z)\" : \"Undo (Ctrl+Z)\"}\n        type=\"button\"\n        aria-label=\"Undo\"\n        size=\"icon\"\n        className=\"!h-8 !w-8\"\n        variant={\"outline\"}\n      >\n        <UndoIcon className=\"size-4\" />\n      </Button>\n      <Button\n        disabled={!canRedo || !isEditable}\n        onClick={() => {\n          activeEditor.dispatchCommand(REDO_COMMAND, undefined)\n        }}\n        title={IS_APPLE ? \"Redo (⇧⌘Z)\" : \"Redo (Ctrl+Y)\"}\n        type=\"button\"\n        aria-label=\"Redo\"\n        variant={\"outline\"}\n        size=\"icon\"\n        className=\"!h-8 !w-8\"\n      >\n        <RedoIcon className=\"size-4\" />\n      </Button>\n    </ButtonGroup>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/history-toolbar-plugin.tsx"
    }
  ]
}