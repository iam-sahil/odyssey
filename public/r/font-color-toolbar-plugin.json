{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-color-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "react-colorful",
    "@lexical/selection"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/font-color-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection, BaseSelection } from \"lexical\"\nimport { BaselineIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport ColorPicker from \"@/registry/new-york-v4/editor/editor-ui/colorpicker\"\n\nexport function FontColorToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const [fontColor, setFontColor] = useState(\"#000\")\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      setFontColor(\n        $getSelectionStyleValueForProperty(selection, \"color\", \"#000\")\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const applyStyleText = useCallback(\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\n      activeEditor.update(\n        () => {\n          const selection = $getSelection()\n          if (selection !== null) {\n            $patchStyleText(selection, styles)\n          }\n        },\n        skipHistoryStack ? { tag: \"historic\" } : {}\n      )\n    },\n    [activeEditor]\n  )\n\n  const onFontColorSelect = useCallback(\n    (value: string, skipHistoryStack: boolean) => {\n      applyStyleText({ color: value }, skipHistoryStack)\n    },\n    [applyStyleText]\n  )\n\n  return (\n    <ColorPicker\n      icon={<BaselineIcon className=\"size-4\" />}\n      color={fontColor}\n      onChange={onFontColorSelect}\n      title=\"text color\"\n    />\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-color-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/font-background-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection, BaseSelection } from \"lexical\"\nimport { PaintBucketIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport ColorPicker from \"@/registry/new-york-v4/editor/editor-ui/colorpicker\"\n\nexport function FontBackgroundToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n\n  const [bgColor, setBgColor] = useState(\"#fff\")\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      setBgColor(\n        $getSelectionStyleValueForProperty(\n          selection,\n          \"background-color\",\n          \"#fff\"\n        )\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const applyStyleText = useCallback(\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\n      activeEditor.update(\n        () => {\n          const selection = $getSelection()\n          if (selection !== null) {\n            $patchStyleText(selection, styles)\n          }\n        },\n        skipHistoryStack ? { tag: \"historic\" } : {}\n      )\n    },\n    [activeEditor]\n  )\n\n  const onBgColorSelect = useCallback(\n    (value: string, skipHistoryStack: boolean) => {\n      applyStyleText({ \"background-color\": value }, skipHistoryStack)\n    },\n    [applyStyleText]\n  )\n\n  return (\n    <ColorPicker\n      icon={<PaintBucketIcon className=\"size-4\" />}\n      color={bgColor}\n      onChange={onBgColorSelect}\n      title=\"text background color\"\n    />\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-background-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-ui/colorpicker.tsx",
      "content": "import * as React from \"react\"\nimport { HexColorPicker } from \"react-colorful\"\n\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york-v4/ui/popover\"\n\ntype Props = {\n  disabled?: boolean\n  icon?: React.ReactNode\n  title?: string\n  color: string\n  onChange?: (color: string, skipHistoryStack: boolean) => void\n}\n\nexport default function ColorPicker({\n  disabled = false,\n  color,\n  onChange,\n  icon,\n  ...rest\n}: Props) {\n  return (\n    <Popover modal={true}>\n      <PopoverTrigger asChild disabled={disabled}>\n        <Button\n          size={\"icon\"}\n          className=\"!h-8 !w-8\"\n          variant={\"outline\"}\n          {...rest}\n        >\n          <span className=\"size-4 rounded-full\">{icon}</span>\n          {/* <ChevronDownIcon className='size-4'/> */}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full space-y-2\">\n        <HexColorPicker\n          color={color}\n          onChange={(color) => onChange?.(color, false)}\n        />\n        <Input\n          maxLength={7}\n          onChange={(e) => {\n            e.stopPropagation()\n            onChange?.(e?.currentTarget?.value, false)\n          }}\n          value={color}\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/editor/editor-ui/colorpicker.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}