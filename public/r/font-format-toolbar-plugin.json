{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-format-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/table"
  ],
  "registryDependencies": [
    "toggle",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/font-format-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\nimport { $isTableSelection } from \"@lexical/table\"\nimport {\n  $isRangeSelection,\n  BaseSelection,\n  FORMAT_TEXT_COMMAND,\n  TextFormatType,\n} from \"lexical\"\nimport {\n  BoldIcon,\n  ItalicIcon,\n  StrikethroughIcon,\n  UnderlineIcon,\n} from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@/registry/new-york-v4/ui/toggle-group\"\n\nconst FORMATS = [\n  { format: \"bold\", icon: BoldIcon, label: \"Bold\" },\n  { format: \"italic\", icon: ItalicIcon, label: \"Italic\" },\n  { format: \"underline\", icon: UnderlineIcon, label: \"Underline\" },\n  { format: \"strikethrough\", icon: StrikethroughIcon, label: \"Strikethrough\" },\n] as const\n\nexport function FontFormatToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n  const [activeFormats, setActiveFormats] = useState<string[]>([])\n\n  const $updateToolbar = useCallback((selection: BaseSelection) => {\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      const formats: string[] = []\n      FORMATS.forEach(({ format }) => {\n        if (selection.hasFormat(format as TextFormatType)) {\n          formats.push(format)\n        }\n      })\n      setActiveFormats((prev) => {\n        // Only update if formats have changed\n        if (\n          prev.length !== formats.length ||\n          !formats.every((f) => prev.includes(f))\n        ) {\n          return formats\n        }\n        return prev\n      })\n    }\n  }, [])\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  return (\n    <ToggleGroup\n      type=\"multiple\"\n      value={activeFormats}\n      onValueChange={setActiveFormats}\n      variant=\"outline\"\n      size=\"sm\"\n    >\n      {FORMATS.map(({ format, icon: Icon, label }) => (\n        <ToggleGroupItem\n          key={format}\n          value={format}\n          aria-label={label}\n          onClick={() => {\n            activeEditor.dispatchCommand(\n              FORMAT_TEXT_COMMAND,\n              format as TextFormatType\n            )\n          }}\n        >\n          <Icon className=\"h-4 w-4\" />\n        </ToggleGroupItem>\n      ))}\n    </ToggleGroup>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-format-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}