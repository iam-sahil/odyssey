{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-picker-menu-plugin",
  "type": "registry:ui",
  "registryDependencies": [
    "command",
    "dialog",
    "@shadcn-editor/rich-text-editor-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/component-picker-menu-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useCallback, useMemo, useState } from \"react\"\nimport dynamic from \"next/dynamic\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { useBasicTypeaheadTriggerMatch } from \"@lexical/react/LexicalTypeaheadMenuPlugin\"\nimport { TextNode } from \"lexical\"\nimport { createPortal } from \"react-dom\"\n\nimport { useEditorModal } from \"@/registry/new-york-v4/editor/editor-hooks/use-modal\"\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/registry/new-york-v4/ui/command\"\n\nimport { ComponentPickerOption } from \"./picker/component-picker-option\"\n\nconst LexicalTypeaheadMenuPlugin = dynamic(\n  () =>\n    import(\"@lexical/react/LexicalTypeaheadMenuPlugin\").then(\n      (mod) => mod.LexicalTypeaheadMenuPlugin<ComponentPickerOption>\n    ),\n  { ssr: false }\n)\n\nexport function ComponentPickerMenuPlugin({\n  baseOptions = [],\n  dynamicOptionsFn,\n}: {\n  baseOptions?: Array<ComponentPickerOption>\n  dynamicOptionsFn?: ({\n    queryString,\n  }: {\n    queryString: string\n  }) => Array<ComponentPickerOption>\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n  const [modal, showModal] = useEditorModal()\n  const [queryString, setQueryString] = useState<string | null>(null)\n\n  const checkForTriggerMatch = useBasicTypeaheadTriggerMatch(\"/\", {\n    minLength: 0,\n  })\n\n  const options = useMemo(() => {\n    if (!queryString) {\n      return baseOptions\n    }\n\n    const regex = new RegExp(queryString, \"i\")\n\n    return [\n      ...(dynamicOptionsFn?.({ queryString }) || []),\n      ...baseOptions.filter(\n        (option) =>\n          regex.test(option.title) ||\n          option.keywords.some((keyword) => regex.test(keyword))\n      ),\n    ]\n  }, [editor, queryString, showModal])\n\n  const onSelectOption = useCallback(\n    (\n      selectedOption: ComponentPickerOption,\n      nodeToRemove: TextNode | null,\n      closeMenu: () => void,\n      matchingString: string\n    ) => {\n      editor.update(() => {\n        nodeToRemove?.remove()\n        selectedOption.onSelect(matchingString, editor, showModal)\n        closeMenu()\n      })\n    },\n    [editor]\n  )\n\n  return (\n    <>\n      {modal}\n      <LexicalTypeaheadMenuPlugin\n        onQueryChange={setQueryString}\n        onSelectOption={onSelectOption}\n        triggerFn={checkForTriggerMatch}\n        options={options}\n        menuRenderFn={(\n          anchorElementRef,\n          { selectedIndex, selectOptionAndCleanUp, setHighlightedIndex }\n        ) => {\n          return anchorElementRef.current && options.length\n            ? createPortal(\n                <div className=\"fixed z-10 w-[250px] rounded-md shadow-md\">\n                  <Command\n                    onKeyDown={(e) => {\n                      if (e.key === \"ArrowUp\") {\n                        e.preventDefault()\n                        setHighlightedIndex(\n                          selectedIndex !== null\n                            ? (selectedIndex - 1 + options.length) %\n                                options.length\n                            : options.length - 1\n                        )\n                      } else if (e.key === \"ArrowDown\") {\n                        e.preventDefault()\n                        setHighlightedIndex(\n                          selectedIndex !== null\n                            ? (selectedIndex + 1) % options.length\n                            : 0\n                        )\n                      }\n                    }}\n                  >\n                    <CommandList>\n                      <CommandGroup>\n                        {options.map((option, index) => (\n                          <CommandItem\n                            key={option.key}\n                            value={option.title}\n                            onSelect={() => {\n                              selectOptionAndCleanUp(option)\n                            }}\n                            className={`flex items-center gap-2 ${\n                              selectedIndex === index\n                                ? \"bg-accent\"\n                                : \"!bg-transparent\"\n                            }`}\n                          >\n                            {option.icon}\n                            {option.title}\n                          </CommandItem>\n                        ))}\n                      </CommandGroup>\n                    </CommandList>\n                  </Command>\n                </div>,\n                anchorElementRef.current\n              )\n            : null\n        }}\n      />\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/component-picker-menu-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-modal.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useCallback, useMemo, useState } from \"react\"\nimport * as React from \"react\"\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/registry/new-york-v4/ui/dialog\"\n\nexport function useEditorModal(): [\n  JSX.Element | null,\n  (title: string, showModal: (onClose: () => void) => JSX.Element) => void,\n] {\n  const [modalContent, setModalContent] = useState<null | {\n    closeOnClickOutside: boolean\n    content: JSX.Element\n    title: string\n  }>(null)\n\n  const onClose = useCallback(() => {\n    setModalContent(null)\n  }, [])\n\n  const modal = useMemo(() => {\n    if (modalContent === null) {\n      return null\n    }\n    const { title, content } = modalContent\n    return (\n      <Dialog open={true} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{title}</DialogTitle>\n          </DialogHeader>\n          {content}\n        </DialogContent>\n      </Dialog>\n    )\n  }, [modalContent, onClose])\n\n  const showModal = useCallback(\n    (\n      title: string,\n      getContent: (onClose: () => void) => JSX.Element,\n      closeOnClickOutside = false\n    ) => {\n      setModalContent({\n        closeOnClickOutside,\n        content: getContent(onClose),\n        title,\n      })\n    },\n    [onClose]\n  )\n\n  return [modal, showModal]\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-hooks/use-modal.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/alignment-picker-plugin.tsx",
      "content": "import { FORMAT_ELEMENT_COMMAND } from \"lexical\"\nimport {\n  AlignCenterIcon,\n  AlignJustifyIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n} from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function AlignmentPickerPlugin({\n  alignment,\n}: {\n  alignment: \"left\" | \"center\" | \"right\" | \"justify\"\n}) {\n  return new ComponentPickerOption(`Align ${alignment}`, {\n    icon: <AlignIcons alignment={alignment} />,\n    keywords: [\"align\", \"justify\", alignment],\n    onSelect: (_, editor) =>\n      editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, alignment),\n  })\n}\n\nfunction AlignIcons({\n  alignment,\n}: {\n  alignment: \"left\" | \"center\" | \"right\" | \"justify\"\n}) {\n  switch (alignment) {\n    case \"left\":\n      return <AlignLeftIcon className=\"size-4\" />\n    case \"center\":\n      return <AlignCenterIcon className=\"size-4\" />\n    case \"right\":\n      return <AlignRightIcon className=\"size-4\" />\n    case \"justify\":\n      return <AlignJustifyIcon className=\"size-4\" />\n  }\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/alignment-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/bulleted-list-picker-plugin.tsx",
      "content": "import { INSERT_UNORDERED_LIST_COMMAND } from \"@lexical/list\"\nimport { ListIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function BulletedListPickerPlugin() {\n  return new ComponentPickerOption(\"Bulleted List\", {\n    icon: <ListIcon className=\"size-4\" />,\n    keywords: [\"bulleted list\", \"unordered list\", \"ul\"],\n    onSelect: (_, editor) =>\n      editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/bulleted-list-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/check-list-picker-plugin.tsx",
      "content": "import { INSERT_CHECK_LIST_COMMAND } from \"@lexical/list\"\nimport { ListTodoIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function CheckListPickerPlugin() {\n  return new ComponentPickerOption(\"Check List\", {\n    icon: <ListTodoIcon className=\"size-4\" />,\n    keywords: [\"check list\", \"todo list\"],\n    onSelect: (_, editor) =>\n      editor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/check-list-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/code-picker-plugin.tsx",
      "content": "import { $createCodeNode } from \"@lexical/code\"\nimport { $setBlocksType } from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection } from \"lexical\"\nimport { CodeIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function CodePickerPlugin() {\n  return new ComponentPickerOption(\"Code\", {\n    icon: <CodeIcon className=\"size-4\" />,\n    keywords: [\"javascript\", \"python\", \"js\", \"codeblock\"],\n    onSelect: (_, editor) =>\n      editor.update(() => {\n        const selection = $getSelection()\n\n        if ($isRangeSelection(selection)) {\n          if (selection.isCollapsed()) {\n            $setBlocksType(selection, () => $createCodeNode())\n          } else {\n            // Will this ever happen?\n            const textContent = selection.getTextContent()\n            const codeNode = $createCodeNode()\n            selection.insertNodes([codeNode])\n            selection.insertRawText(textContent)\n          }\n        }\n      }),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/code-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/columns-layout-picker-plugin.tsx",
      "content": "import { Columns3Icon } from \"lucide-react\"\n\nimport { InsertLayoutDialog } from \"@/registry/new-york-v4/editor/plugins/layout-plugin\"\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function ColumnsLayoutPickerPlugin() {\n  return new ComponentPickerOption(\"Columns Layout\", {\n    icon: <Columns3Icon className=\"size-4\" />,\n    keywords: [\"columns\", \"layout\", \"grid\"],\n    onSelect: (_, editor, showModal) =>\n      showModal(\"Insert Columns Layout\", (onClose) => (\n        <InsertLayoutDialog activeEditor={editor} onClose={onClose} />\n      )),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/columns-layout-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/component-picker-option.tsx",
      "content": "import { JSX } from \"react\"\nimport { MenuOption } from \"@lexical/react/LexicalTypeaheadMenuPlugin\"\nimport { LexicalEditor } from \"lexical\"\n\nexport class ComponentPickerOption extends MenuOption {\n  // What shows up in the editor\n  title: string\n  // Icon for display\n  icon?: JSX.Element\n  // For extra searching.\n  keywords: Array<string>\n  // TBD\n  keyboardShortcut?: string\n  // What happens when you select this option?\n  onSelect: (\n    queryString: string,\n    editor: LexicalEditor,\n    showModal: (\n      title: string,\n      showModal: (onClose: () => void) => JSX.Element\n    ) => void\n  ) => void\n\n  constructor(\n    title: string,\n    options: {\n      icon?: JSX.Element\n      keywords?: Array<string>\n      keyboardShortcut?: string\n      onSelect: (\n        queryString: string,\n        editor: LexicalEditor,\n        showModal: (\n          title: string,\n          showModal: (onClose: () => void) => JSX.Element\n        ) => void\n      ) => void\n    }\n  ) {\n    super(title)\n    this.title = title\n    this.keywords = options.keywords || []\n    this.icon = options.icon\n    this.keyboardShortcut = options.keyboardShortcut\n    this.onSelect = options.onSelect.bind(this)\n  }\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/component-picker-option.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/divider-picker-plugin.tsx",
      "content": "import { INSERT_HORIZONTAL_RULE_COMMAND } from \"@lexical/react/LexicalHorizontalRuleNode\"\nimport { MinusIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function DividerPickerPlugin() {\n  return new ComponentPickerOption(\"Divider\", {\n    icon: <MinusIcon className=\"size-4\" />,\n    keywords: [\"horizontal rule\", \"divider\", \"hr\"],\n    onSelect: (_, editor) =>\n      editor.dispatchCommand(INSERT_HORIZONTAL_RULE_COMMAND, undefined),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/divider-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/embeds-picker-plugin.tsx",
      "content": "import { INSERT_EMBED_COMMAND } from \"@lexical/react/LexicalAutoEmbedPlugin\"\n\nimport {\n  CustomEmbedConfig,\n  EmbedConfigs,\n} from \"@/registry/new-york-v4/editor/plugins/embeds/auto-embed-plugin\"\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function EmbedsPickerPlugin({\n  embed,\n}: {\n  embed: \"tweet\" | \"youtube-video\"\n}) {\n  const embedConfig = EmbedConfigs.find(\n    (config) => config.type === embed\n  ) as CustomEmbedConfig\n\n  return new ComponentPickerOption(`Embed ${embedConfig.contentName}`, {\n    icon: embedConfig.icon,\n    keywords: [...embedConfig.keywords, \"embed\"],\n    onSelect: (_, editor) =>\n      editor.dispatchCommand(INSERT_EMBED_COMMAND, embedConfig.type),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/embeds-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/heading-picker-plugin.tsx",
      "content": "import { $createHeadingNode } from \"@lexical/rich-text\"\nimport { $setBlocksType } from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection } from \"lexical\"\nimport { Heading1Icon, Heading2Icon, Heading3Icon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function HeadingPickerPlugin({ n }: { n: 1 | 2 | 3 }) {\n  return new ComponentPickerOption(`Heading ${n}`, {\n    icon: <HeadingIcons n={n} />,\n    keywords: [\"heading\", \"header\", `h${n}`],\n    onSelect: (_, editor) =>\n      editor.update(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createHeadingNode(`h${n}`))\n        }\n      }),\n  })\n}\n\nfunction HeadingIcons({ n }: { n: number }) {\n  switch (n) {\n    case 1:\n      return <Heading1Icon className=\"size-4\" />\n    case 2:\n      return <Heading2Icon className=\"size-4\" />\n    case 3:\n      return <Heading3Icon className=\"size-4\" />\n  }\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/heading-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/image-picker-plugin.tsx",
      "content": "import { ImageIcon } from \"lucide-react\"\n\nimport { InsertImageDialog } from \"@/registry/new-york-v4/editor/plugins/images-plugin\"\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function ImagePickerPlugin() {\n  return new ComponentPickerOption(\"Image\", {\n    icon: <ImageIcon className=\"size-4\" />,\n    keywords: [\"image\", \"photo\", \"picture\", \"file\"],\n    onSelect: (_, editor, showModal) =>\n      showModal(\"Insert Image\", (onClose) => (\n        <InsertImageDialog activeEditor={editor} onClose={onClose} />\n      )),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/image-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/numbered-list-picker-plugin.tsx",
      "content": "import { INSERT_ORDERED_LIST_COMMAND } from \"@lexical/list\"\nimport { ListOrderedIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function NumberedListPickerPlugin() {\n  return new ComponentPickerOption(\"Numbered List\", {\n    icon: <ListOrderedIcon className=\"size-4\" />,\n    keywords: [\"numbered list\", \"ordered list\", \"ol\"],\n    onSelect: (_, editor) =>\n      editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/numbered-list-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/paragraph-picker-plugin.tsx",
      "content": "import { $setBlocksType } from \"@lexical/selection\"\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from \"lexical\"\nimport { TextIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function ParagraphPickerPlugin() {\n  return new ComponentPickerOption(\"Paragraph\", {\n    icon: <TextIcon className=\"size-4\" />,\n    keywords: [\"normal\", \"paragraph\", \"p\", \"text\"],\n    onSelect: (_, editor) =>\n      editor.update(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createParagraphNode())\n        }\n      }),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/paragraph-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/quote-picker-plugin.tsx",
      "content": "import { $createQuoteNode } from \"@lexical/rich-text\"\nimport { $setBlocksType } from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection } from \"lexical\"\nimport { QuoteIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\n\nexport function QuotePickerPlugin() {\n  return new ComponentPickerOption(\"Quote\", {\n    icon: <QuoteIcon className=\"size-4\" />,\n    keywords: [\"block quote\"],\n    onSelect: (_, editor) =>\n      editor.update(() => {\n        const selection = $getSelection()\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createQuoteNode())\n        }\n      }),\n  })\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/quote-picker-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/plugins/picker/table-picker-plugin.tsx",
      "content": "import { INSERT_TABLE_COMMAND } from \"@lexical/table\"\nimport { TableIcon } from \"lucide-react\"\n\nimport { ComponentPickerOption } from \"@/registry/new-york-v4/editor/plugins/picker/component-picker-option\"\nimport { InsertTableDialog } from \"@/registry/new-york-v4/editor/plugins/table-plugin\"\n\nexport function TablePickerPlugin() {\n  return new ComponentPickerOption(\"Table\", {\n    icon: <TableIcon className=\"size-4\" />,\n    keywords: [\"table\", \"grid\", \"spreadsheet\", \"rows\", \"columns\"],\n    onSelect: (_, editor, showModal) =>\n      showModal(\"Insert Table\", (onClose) => (\n        <InsertTableDialog activeEditor={editor} onClose={onClose} />\n      )),\n  })\n}\n\nexport function DynamicTablePickerPlugin({\n  queryString,\n}: {\n  queryString: string\n}) {\n  const options: Array<ComponentPickerOption> = []\n\n  if (queryString == null) {\n    return options\n  }\n\n  const tableMatch = queryString.match(/^([1-9]\\d?)(?:x([1-9]\\d?)?)?$/)\n\n  if (tableMatch !== null) {\n    const rows = tableMatch[1]\n    const colOptions = tableMatch[2]\n      ? [tableMatch[2]]\n      : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(String)\n\n    options.push(\n      ...colOptions.map(\n        (columns) =>\n          new ComponentPickerOption(`${rows}x${columns} Table`, {\n            icon: <i className=\"icon table\" />,\n            keywords: [\"table\"],\n            onSelect: (_, editor) =>\n              editor.dispatchCommand(INSERT_TABLE_COMMAND, { columns, rows }),\n          })\n      )\n    )\n  }\n\n  return options\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/picker/table-picker-plugin.tsx"
    }
  ]
}