{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typing-pref-plugin",
  "type": "registry:ui",
  "registryDependencies": [
    "@shadcn-editor/rich-text-editor-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/typing-pref-plugin.tsx",
      "content": "\"use client\"\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { JSX, useEffect } from \"react\"\n\nimport { useReport } from \"@/registry/new-york-v4/editor/editor-hooks/use-report\"\n\nconst validInputTypes = new Set([\n  \"insertText\",\n  \"insertCompositionText\",\n  \"insertFromComposition\",\n  \"insertLineBreak\",\n  \"insertParagraph\",\n  \"deleteCompositionText\",\n  \"deleteContentBackward\",\n  \"deleteByComposition\",\n  \"deleteContent\",\n  \"deleteContentForward\",\n  \"deleteWordBackward\",\n  \"deleteWordForward\",\n  \"deleteHardLineBackward\",\n  \"deleteSoftLineBackward\",\n  \"deleteHardLineForward\",\n  \"deleteSoftLineForward\",\n])\n\nexport function TypingPerfPlugin(): JSX.Element | null {\n  const report = useReport()\n  useEffect(() => {\n    let start = 0\n    let timerId: ReturnType<typeof setTimeout> | null\n    let keyPressTimerId: ReturnType<typeof setTimeout> | null\n    let log: Array<DOMHighResTimeStamp> = []\n    let invalidatingEvent = false\n\n    const measureEventEnd = function logKeyPress() {\n      if (keyPressTimerId != null) {\n        if (invalidatingEvent) {\n          invalidatingEvent = false\n        } else {\n          log.push(performance.now() - start)\n        }\n\n        clearTimeout(keyPressTimerId)\n        keyPressTimerId = null\n      }\n    }\n\n    const measureEventStart = function measureEvent() {\n      if (timerId != null) {\n        clearTimeout(timerId)\n        timerId = null\n      }\n\n      // We use a setTimeout(0) instead of requestAnimationFrame, due to\n      // inconsistencies between the sequencing of rAF in different browsers.\n      keyPressTimerId = setTimeout(measureEventEnd, 0)\n      // Schedule a timer to report the results.\n      timerId = setTimeout(() => {\n        const total = log.reduce((a, b) => a + b, 0)\n        const reportedText =\n          \"Typing Perf: \" + Math.round((total / log.length) * 100) / 100 + \"ms\"\n        report(reportedText)\n        log = []\n      }, 2000)\n      // Make the time after we do the previous logic, so we don't measure the overhead\n      // for it all.\n      start = performance.now()\n    }\n\n    const beforeInputHandler = function beforeInputHandler(event: InputEvent) {\n      if (!validInputTypes.has(event.inputType) || invalidatingEvent) {\n        invalidatingEvent = false\n        return\n      }\n\n      measureEventStart()\n    }\n\n    const keyDownHandler = function keyDownHandler(event: KeyboardEvent) {\n      const key = event.key\n\n      if (key === \"Backspace\" || key === \"Enter\") {\n        measureEventStart()\n      }\n    }\n\n    const pasteHandler = function pasteHandler() {\n      invalidatingEvent = true\n    }\n\n    const cutHandler = function cutHandler() {\n      invalidatingEvent = true\n    }\n\n    window.addEventListener(\"keydown\", keyDownHandler, true)\n    window.addEventListener(\"selectionchange\", measureEventEnd, true)\n    window.addEventListener(\"beforeinput\", beforeInputHandler, true)\n    window.addEventListener(\"paste\", pasteHandler, true)\n    window.addEventListener(\"cut\", cutHandler, true)\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownHandler, true)\n      window.removeEventListener(\"selectionchange\", measureEventEnd, true)\n      window.removeEventListener(\"beforeinput\", beforeInputHandler, true)\n      window.removeEventListener(\"paste\", pasteHandler, true)\n      window.removeEventListener(\"cut\", cutHandler, true)\n    }\n  }, [report])\n\n  return null\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/typing-pref-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-report.ts",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { useCallback, useEffect, useRef } from \"react\"\n\nconst getElement = (): HTMLElement => {\n  let element = document.getElementById(\"report-container\")\n\n  if (element === null) {\n    element = document.createElement(\"div\")\n    element.id = \"report-container\"\n    element.style.position = \"fixed\"\n    element.style.top = \"50%\"\n    element.style.left = \"50%\"\n    element.style.fontSize = \"32px\"\n    element.style.transform = \"translate(-50%, -50px)\"\n    element.style.padding = \"20px\"\n    element.style.background = \"rgba(240, 240, 240, 0.4)\"\n    element.style.borderRadius = \"20px\"\n\n    if (document.body) {\n      document.body.appendChild(element)\n    }\n  }\n\n  return element\n}\n\nexport function useReport(): (arg0: string) => ReturnType<typeof setTimeout> {\n  const timer = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const cleanup = useCallback(() => {\n    if (timer.current !== null) {\n      clearTimeout(timer.current)\n      timer.current = null\n    }\n\n    if (document.body) {\n      document.body.removeChild(getElement())\n    }\n  }, [])\n\n  useEffect(() => {\n    return cleanup\n  }, [cleanup])\n\n  return useCallback(\n    (content) => {\n      console.log(content)\n      const element = getElement()\n      if (timer.current !== null) {\n        clearTimeout(timer.current)\n      }\n      element.innerHTML = content\n      timer.current = setTimeout(cleanup, 1000)\n      return timer.current\n    },\n    [cleanup]\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/editor-hooks/use-report.ts"
    }
  ]
}