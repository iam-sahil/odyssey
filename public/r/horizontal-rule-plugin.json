{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "horizontal-rule-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "select",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx",
      "content": "\"use client\"\n\nimport { INSERT_HORIZONTAL_RULE_COMMAND } from \"@lexical/react/LexicalHorizontalRuleNode\"\nimport { ScissorsIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { SelectItem } from \"@/registry/new-york-v4/ui/select\"\n\nexport function InsertHorizontalRule() {\n  const { activeEditor } = useToolbarContext()\n\n  return (\n    <SelectItem\n      value=\"horizontal-rule\"\n      onPointerUp={() =>\n        activeEditor.dispatchCommand(INSERT_HORIZONTAL_RULE_COMMAND, undefined)\n      }\n      className=\"\"\n    >\n      <div className=\"flex items-center gap-1\">\n        <ScissorsIcon className=\"size-4\" />\n        <span>Horizontal Rule</span>\n      </div>\n    </SelectItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-horizontal-rule.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/transformers/markdown-hr-transformer.ts",
      "content": "import { ElementTransformer } from \"@lexical/markdown\"\nimport {\n  $createHorizontalRuleNode,\n  $isHorizontalRuleNode,\n  HorizontalRuleNode,\n} from \"@lexical/react/LexicalHorizontalRuleNode\"\nimport { LexicalNode } from \"lexical\"\n\nexport const HR: ElementTransformer = {\n  dependencies: [HorizontalRuleNode],\n  export: (node: LexicalNode) => {\n    return $isHorizontalRuleNode(node) ? \"***\" : null\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = $createHorizontalRuleNode()\n\n    // TODO: Get rid of isImport flag\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line)\n    } else {\n      parentNode.insertBefore(line)\n    }\n\n    line.selectNext()\n  },\n  type: \"element\",\n}\n",
      "type": "registry:file",
      "target": "components/editor/transformers/markdown-hr-transformer.ts"
    }
  ]
}