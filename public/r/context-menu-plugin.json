{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "context-menu-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/link"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "@shadcn-editor/rich-text-editor-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/context-menu-plugin.tsx",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type { JSX } from \"react\"\nimport { useMemo } from \"react\"\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from \"@lexical/link\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  NodeContextMenuOption,\n  NodeContextMenuPlugin,\n  NodeContextMenuSeparator,\n} from \"@lexical/react/LexicalNodeContextMenuPlugin\"\nimport {\n  $getSelection,\n  $isDecoratorNode,\n  $isNodeSelection,\n  $isRangeSelection,\n  COPY_COMMAND,\n  CUT_COMMAND,\n  PASTE_COMMAND,\n  type LexicalNode,\n} from \"lexical\"\nimport {\n  Clipboard,\n  ClipboardType,\n  Copy,\n  Link2Off,\n  Scissors,\n  Trash2,\n} from \"lucide-react\"\n\nexport function ContextMenuPlugin(): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n\n  const items = useMemo(() => {\n    return [\n      new NodeContextMenuOption(`Remove Link`, {\n        $onSelect: () => {\n          editor.dispatchCommand(TOGGLE_LINK_COMMAND, null)\n        },\n        $showOn: (node: LexicalNode) => $isLinkNode(node.getParent()),\n        disabled: false,\n        icon: <Link2Off className=\"h-4 w-4\" />,\n      }),\n      new NodeContextMenuSeparator({\n        $showOn: (node: LexicalNode) => $isLinkNode(node.getParent()),\n      }),\n      new NodeContextMenuOption(`Cut`, {\n        $onSelect: () => {\n          editor.dispatchCommand(CUT_COMMAND, null)\n        },\n        disabled: false,\n        icon: <Scissors className=\"h-4 w-4\" />,\n      }),\n      new NodeContextMenuOption(`Copy`, {\n        $onSelect: () => {\n          editor.dispatchCommand(COPY_COMMAND, null)\n        },\n        disabled: false,\n        icon: <Copy className=\"h-4 w-4\" />,\n      }),\n      new NodeContextMenuOption(`Paste`, {\n        $onSelect: () => {\n          navigator.clipboard.read().then(async function (...args) {\n            const data = new DataTransfer()\n\n            const readClipboardItems = await navigator.clipboard.read()\n            const item = readClipboardItems[0]\n\n            const permission = await navigator.permissions.query({\n              // @ts-expect-error These types are incorrect.\n              name: \"clipboard-read\",\n            })\n            if (permission.state === \"denied\") {\n              alert(\"Not allowed to paste from clipboard.\")\n              return\n            }\n\n            for (const type of item.types) {\n              const dataString = await (await item.getType(type)).text()\n              data.setData(type, dataString)\n            }\n\n            const event = new ClipboardEvent(\"paste\", {\n              clipboardData: data,\n            })\n\n            editor.dispatchCommand(PASTE_COMMAND, event)\n          })\n        },\n        disabled: false,\n        icon: <Clipboard className=\"h-4 w-4\" />,\n      }),\n      new NodeContextMenuOption(`Paste as Plain Text`, {\n        $onSelect: () => {\n          navigator.clipboard.read().then(async function (...args) {\n            const permission = await navigator.permissions.query({\n              // @ts-expect-error These types are incorrect.\n              name: \"clipboard-read\",\n            })\n\n            if (permission.state === \"denied\") {\n              alert(\"Not allowed to paste from clipboard.\")\n              return\n            }\n\n            const data = new DataTransfer()\n            const clipboardText = await navigator.clipboard.readText()\n            data.setData(\"text/plain\", clipboardText)\n\n            const event = new ClipboardEvent(\"paste\", {\n              clipboardData: data,\n            })\n            editor.dispatchCommand(PASTE_COMMAND, event)\n          })\n        },\n        disabled: false,\n        icon: <ClipboardType className=\"h-4 w-4\" />,\n      }),\n      new NodeContextMenuSeparator(),\n      new NodeContextMenuOption(`Delete Node`, {\n        $onSelect: () => {\n          const selection = $getSelection()\n          if ($isRangeSelection(selection)) {\n            const currentNode = selection.anchor.getNode()\n            const ancestorNodeWithRootAsParent = currentNode.getParents().at(-2)\n\n            ancestorNodeWithRootAsParent?.remove()\n          } else if ($isNodeSelection(selection)) {\n            const selectedNodes = selection.getNodes()\n            selectedNodes.forEach((node) => {\n              if ($isDecoratorNode(node)) {\n                node.remove()\n              }\n            })\n          }\n        },\n        disabled: false,\n        icon: <Trash2 className=\"h-4 w-4\" />,\n      }),\n    ]\n  }, [editor])\n\n  return (\n    <NodeContextMenuPlugin\n      className=\"bg-popover text-popover-foreground !z-50 overflow-hidden rounded-md border shadow-md outline-none [&:has(*)]:!z-10\"\n      itemClassName=\"relative w-full flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none select-none hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\"\n      separatorClassName=\"bg-border -mx-1 h-px\"\n      items={items}\n    />\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/context-menu-plugin.tsx"
    }
  ]
}