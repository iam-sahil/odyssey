{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "subsuper-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/table"
  ],
  "registryDependencies": [
    "toggle-group",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { $isTableSelection } from \"@lexical/table\"\nimport { $isRangeSelection, BaseSelection, FORMAT_TEXT_COMMAND } from \"lexical\"\nimport { SubscriptIcon, SuperscriptIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@/registry/new-york-v4/ui/toggle-group\"\n\nexport function SubSuperToolbarPlugin() {\n  const { activeEditor } = useToolbarContext()\n  const [isSubscript, setIsSubscript] = useState(false)\n  const [isSuperscript, setIsSuperscript] = useState(false)\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\n      // @ts-ignore\n      setIsSubscript(selection.hasFormat(\"subscript\"))\n      // @ts-ignore\n      setIsSuperscript(selection.hasFormat(\"superscript\"))\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  return (\n    <ToggleGroup\n      type=\"single\"\n      defaultValue={\n        isSubscript ? \"subscript\" : isSuperscript ? \"superscript\" : \"\"\n      }\n    >\n      <ToggleGroupItem\n        value=\"subscript\"\n        size=\"sm\"\n        aria-label=\"Toggle subscript\"\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, \"subscript\")\n        }}\n        variant={\"outline\"}\n      >\n        <SubscriptIcon className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem\n        value=\"superscript\"\n        size=\"sm\"\n        aria-label=\"Toggle superscript\"\n        onClick={() => {\n          activeEditor.dispatchCommand(FORMAT_TEXT_COMMAND, \"superscript\")\n        }}\n        variant={\"outline\"}\n      >\n        <SuperscriptIcon className=\"h-4 w-4\" />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/subsuper-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}