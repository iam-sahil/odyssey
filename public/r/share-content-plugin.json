{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "share-content-plugin",
  "type": "registry:ui",
  "dependencies": [
    "sonner",
    "@lexical/file"
  ],
  "registryDependencies": [
    "button",
    "tooltip",
    "sonner",
    "toast",
    "@shadcn-editor/actions-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/actions/share-content-plugin.tsx",
      "content": "\"use client\"\n\nimport { useEffect } from \"react\"\nimport {\n  editorStateFromSerializedDocument,\n  SerializedDocument,\n  serializedDocumentFromEditorState,\n} from \"@lexical/file\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport { CLEAR_HISTORY_COMMAND } from \"lexical\"\nimport { SendIcon } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\nimport {\n  docFromHash,\n  docToHash,\n} from \"@/registry/new-york-v4/editor/utils/doc-serialization\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/registry/new-york-v4/ui/tooltip\"\n\nexport function ShareContentPlugin() {\n  const [editor] = useLexicalComposerContext()\n  async function shareDoc(doc: SerializedDocument): Promise<void> {\n    const url = new URL(window.location.toString())\n    url.hash = await docToHash(doc)\n    const newUrl = url.toString()\n    window.history.replaceState({}, \"\", newUrl)\n    await window.navigator.clipboard.writeText(newUrl)\n  }\n  useEffect(() => {\n    docFromHash(window.location.hash).then((doc) => {\n      if (doc && doc.source === \"editor\") {\n        editor.setEditorState(editorStateFromSerializedDocument(editor, doc))\n        editor.dispatchCommand(CLEAR_HISTORY_COMMAND, undefined)\n      }\n    })\n  }, [editor])\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          variant={\"ghost\"}\n          onClick={() =>\n            shareDoc(\n              serializedDocumentFromEditorState(editor.getEditorState(), {\n                source: \"editor\",\n              })\n            ).then(\n              () => toast.success(\"URL copied to clipboard\"),\n              () => toast.error(\"URL could not be copied to clipboard\")\n            )\n          }\n          title=\"Share\"\n          aria-label=\"Share Playground link to current editor state\"\n          size={\"sm\"}\n          className=\"p-2\"\n        >\n          <SendIcon className=\"size-4\" />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>Share Content</TooltipContent>\n    </Tooltip>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/actions/share-content-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/utils/doc-serialization.ts",
      "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { SerializedDocument } from \"@lexical/file\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function* generateReader<T = any>(\n  reader: ReadableStreamDefaultReader<T>\n) {\n  let done = false\n  while (!done) {\n    const res = await reader.read()\n    const { value } = res\n    if (value !== undefined) {\n      yield value\n    }\n    done = res.done\n  }\n}\n\nasync function readBytestoString(\n  reader: ReadableStreamDefaultReader\n): Promise<string> {\n  const output = []\n  const chunkSize = 0x8000\n  for await (const value of generateReader(reader)) {\n    for (let i = 0; i < value.length; i += chunkSize) {\n      output.push(String.fromCharCode(...value.subarray(i, i + chunkSize)))\n    }\n  }\n  return output.join(\"\")\n}\n\nexport async function docToHash(doc: SerializedDocument): Promise<string> {\n  const cs = new CompressionStream(\"gzip\")\n  const writer = cs.writable.getWriter()\n  const [, output] = await Promise.all([\n    writer\n      .write(new TextEncoder().encode(JSON.stringify(doc)))\n      .then(() => writer.close()),\n    readBytestoString(cs.readable.getReader()),\n  ])\n  return `#doc=${btoa(output)\n    .replace(/\\//g, \"_\")\n    .replace(/\\+/g, \"-\")\n    .replace(/=+$/, \"\")}`\n}\n\nexport async function docFromHash(\n  hash: string\n): Promise<SerializedDocument | null> {\n  const m = /^#doc=(.*)$/.exec(hash)\n  if (!m) {\n    return null\n  }\n  const ds = new DecompressionStream(\"gzip\")\n  const writer = ds.writable.getWriter()\n  const b64 = atob(m[1].replace(/_/g, \"/\").replace(/-/g, \"+\"))\n  const array = new Uint8Array(b64.length)\n  for (let i = 0; i < b64.length; i++) {\n    array[i] = b64.charCodeAt(i)\n  }\n  const closed = writer.write(array).then(() => writer.close())\n  const output = []\n  for await (const chunk of generateReader(\n    ds.readable.pipeThrough(new TextDecoderStream()).getReader()\n  )) {\n    output.push(chunk)\n  }\n  await closed\n  return JSON.parse(output.join(\"\"))\n}\n",
      "type": "registry:component",
      "target": "components/editor/utils/doc-serialization.ts"
    }
  ]
}