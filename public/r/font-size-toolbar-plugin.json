{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-size-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/selection"
  ],
  "registryDependencies": [
    "button",
    "input",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/font-size-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection, BaseSelection } from \"lexical\"\nimport { Minus, Plus } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { ButtonGroup } from \"@/registry/new-york-v4/ui/button-group\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\n\nconst DEFAULT_FONT_SIZE = 16\nconst MIN_FONT_SIZE = 1\nconst MAX_FONT_SIZE = 72\n\nexport function FontSizeToolbarPlugin() {\n  const style = \"font-size\"\n  const [fontSize, setFontSize] = useState(DEFAULT_FONT_SIZE)\n\n  const { activeEditor } = useToolbarContext()\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      const value = $getSelectionStyleValueForProperty(\n        selection,\n        \"font-size\",\n        `${DEFAULT_FONT_SIZE}px`\n      )\n      setFontSize(parseInt(value) || DEFAULT_FONT_SIZE)\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const updateFontSize = useCallback(\n    (newSize: number) => {\n      const size = Math.min(Math.max(newSize, MIN_FONT_SIZE), MAX_FONT_SIZE)\n      activeEditor.update(() => {\n        const selection = $getSelection()\n        if (selection !== null) {\n          $patchStyleText(selection, {\n            [style]: `${size}px`,\n          })\n        }\n      })\n      setFontSize(size)\n    },\n    [activeEditor, style]\n  )\n\n  return (\n    <ButtonGroup>\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        className=\"!h-8 !w-8\"\n        onClick={() => updateFontSize(fontSize - 1)}\n        disabled={fontSize <= MIN_FONT_SIZE}\n      >\n        <Minus className=\"size-3\" />\n      </Button>\n      <Input\n        value={fontSize}\n        onChange={(e) =>\n          updateFontSize(parseInt(e.target.value) || DEFAULT_FONT_SIZE)\n        }\n        className=\"!h-8 w-12 text-center\"\n        min={MIN_FONT_SIZE}\n        max={MAX_FONT_SIZE}\n      />\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        className=\"!h-8 !w-8\"\n        onClick={() => updateFontSize(fontSize + 1)}\n        disabled={fontSize >= MAX_FONT_SIZE}\n      >\n        <Plus className=\"size-3\" />\n      </Button>\n    </ButtonGroup>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-size-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}