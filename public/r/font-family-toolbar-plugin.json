{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-family-toolbar-plugin",
  "type": "registry:ui",
  "dependencies": [
    "@lexical/selection"
  ],
  "registryDependencies": [
    "select",
    "@shadcn-editor/toolbar-plugin"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/editor/plugins/toolbar/font-family-toolbar-plugin.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from \"@lexical/selection\"\nimport { $getSelection, $isRangeSelection, BaseSelection } from \"lexical\"\nimport { TypeIcon } from \"lucide-react\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\nimport { useUpdateToolbarHandler } from \"@/registry/new-york-v4/editor/editor-hooks/use-update-toolbar\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n} from \"@/registry/new-york-v4/ui/select\"\n\nconst FONT_FAMILY_OPTIONS = [\n  \"Arial\",\n  \"Verdana\",\n  \"Times New Roman\",\n  \"Georgia\",\n  \"Courier New\",\n  \"Trebuchet MS\",\n]\n\nexport function FontFamilyToolbarPlugin() {\n  const style = \"font-family\"\n  const [fontFamily, setFontFamily] = useState(\"Arial\")\n\n  const { activeEditor } = useToolbarContext()\n\n  const $updateToolbar = (selection: BaseSelection) => {\n    if ($isRangeSelection(selection)) {\n      setFontFamily(\n        $getSelectionStyleValueForProperty(selection, \"font-family\", \"Arial\")\n      )\n    }\n  }\n\n  useUpdateToolbarHandler($updateToolbar)\n\n  const handleClick = useCallback(\n    (option: string) => {\n      activeEditor.update(() => {\n        const selection = $getSelection()\n        if (selection !== null) {\n          $patchStyleText(selection, {\n            [style]: option,\n          })\n        }\n      })\n    },\n    [activeEditor, style]\n  )\n\n  const buttonAriaLabel = \"Formatting options for font family\"\n\n  return (\n    <Select\n      value={fontFamily}\n      onValueChange={(value) => {\n        setFontFamily(value)\n        handleClick(value)\n      }}\n      aria-label={buttonAriaLabel}\n    >\n      <SelectTrigger className=\"!h-8 w-min gap-1\">\n        <TypeIcon className=\"size-4\" />\n        <span style={{ fontFamily }}>{fontFamily}</span>\n      </SelectTrigger>\n      <SelectContent>\n        {FONT_FAMILY_OPTIONS.map((option) => (\n          <SelectItem\n            key={option}\n            value={option}\n            style={{ fontFamily: option }}\n          >\n            {option}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-family-toolbar-plugin.tsx"
    },
    {
      "path": "registry/new-york-v4/editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from \"react\"\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\"\nimport {\n  $getSelection,\n  BaseSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  SELECTION_CHANGE_COMMAND,\n} from \"lexical\"\n\nimport { useToolbarContext } from \"@/registry/new-york-v4/editor/context/toolbar-context\"\n\nexport function useUpdateToolbarHandler(\n  callback: (selection: BaseSelection) => void\n) {\n  const [editor] = useLexicalComposerContext()\n  const { activeEditor } = useToolbarContext()\n\n  useEffect(() => {\n    return activeEditor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        const selection = $getSelection()\n        if (selection) {\n          callback(selection)\n        }\n        return false\n      },\n      COMMAND_PRIORITY_CRITICAL\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, callback])\n\n  useEffect(() => {\n    activeEditor.getEditorState().read(() => {\n      const selection = $getSelection()\n      if (selection) {\n        callback(selection)\n      }\n    })\n  }, [activeEditor, callback])\n}\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}